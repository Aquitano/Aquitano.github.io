---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { getCollection } from 'astro:content';
import LinkButton from '../../components/LinkButton.astro';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
    const projects = await getCollection('project');
    return projects.map((project) => ({
        params: { slug: project.slug },
        props: { project },
    }));
}

const { project } = Astro.props;
const { Content } = await project.render();

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/*.{jpg,jpeg,png,webp}');
const imagePath = `/src/assets/images/${project.data.fullImage}`;

let fullImageSrc: ImageMetadata | null = null;
if (project.data.fullImage) {
    if (!images[imagePath]) {
        console.warn(`Full image not found for ${imagePath}`);
    } else {
        const mod = await images[imagePath]();
        fullImageSrc = mod.default;
    }
}
---

<Layout title={project.data.title + ' | Breindl Thomas'} active="Projekte">
    <div class="scroll-container">
        <div>
            <section class="project-hero pt-24 md:pt-36 lg:pt-48 xl:pt-52">
                <div class="wrapper px-4">
                    <h1
                        class="project-title hero-animation mb-8 font-extrabold tracking-tight text-black/90"
                        style="--reveal-delay: 340ms"
                    >
                        {project.data.title}
                    </h1>
                    <div class="grid grid-cols-1 gap-8 md:grid-cols-3">
                        <div class="info mb-5 md:mb-0">
                            <div>
                                <div id="Desc" class="hero-animation mb-4" style="--reveal-delay: 750ms">
                                    <p class="pre-header mb-2 text-sm text-gray-400 uppercase">Aufgabe</p>
                                    <h4 class="mb-4 text-lg font-medium">
                                        {
                                            project.data.tasks.map((task: string) => (
                                                <span>
                                                    {task}
                                                    <br />
                                                </span>
                                            ))
                                        }
                                    </h4>
                                    <p class="pre-header mb-2 text-sm text-gray-400 uppercase">Jahr</p>
                                    <h4 class="text-lg font-medium">{project.data.year}</h4>
                                </div>
                            </div>
                        </div>
                        <div class="content col-span-2">
                            <div
                                class="content-body hero-animation mb-4 text-justify font-normal text-black/70"
                                style="--reveal-delay: 1900ms"
                            >
                                <Content />
                                <div class="mt-4 flex flex-row space-x-4">
                                    {
                                        project.data.links?.map((link) => (
                                            <LinkButton text={link.text} icon={link.icon} href={link.link} />
                                        ))
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            {
                fullImageSrc && (
                    <section class="case-study-photos hero-animation pt-20" style="--reveal-delay: 720ms">
                        <div class="wrapper px-4">
                            <div>
                                <Image
                                    alt="Website on multiple devices"
                                    src={fullImageSrc}
                                    height={820}
                                    width={1420}
                                    class="rounded-3xl"
                                    loading="lazy"
                                />
                            </div>
                        </div>
                    </section>
                )
            }
        </div>
    </div>
</Layout>

<style lang="scss">
    .pre-header {
        padding-top: 5px;
        padding-bottom: 5px;
        letter-spacing: 0.4em;
    }
    .pre-header + h4 {
        margin-top: 0.35rem;
    }
    h4 + .pre-header {
        margin-top: 1.75rem;
    }
    .project-hero::before {
        content: '';
        position: absolute;
        inset: -40px 0 0;
        pointer-events: none;
        background: radial-gradient(800px 160px at 50% 0, rgba(255, 255, 255, 0.06), transparent 60%);
    }
    .project-title {
        /* Match footer tone and use fluid clamp similar to global headings */
        font-family: 'Helvetica Now Display DW', sans-serif;
        font-size: clamp(2.6rem, 1.2rem + 6vw, 6rem);
        line-height: 1.08;
        text-wrap: balance;
        font-weight: 1000;
    }
    .content-body {
        /* Fluid readable body size similar to main page */
        font-size: clamp(1.02rem, 0.9rem + 0.6vw, 1.2rem);
        line-height: 1.7;
        text-wrap: pretty;
    }
    section.case-study-photos Img {
        display: block;
        max-width: 100%;
        opacity: 1;
        margin: 0 auto;
        width: 100%;
    }
    section.case-study-photos video {
        display: block;
        width: 100%;
    }

    .hero-animation {
        opacity: 0;
        transition: none;
    }
    @media (prefers-reduced-motion: reduce) {
        .hero-animation {
            opacity: 1 !important;
        }
    }
</style>

<script>
    import { timeline, glide } from 'motion';
    import type { TimelineDefinition } from 'motion';

    const { matches: motionOK } = window.matchMedia('(prefers-reduced-motion: no-preference)');

    function parseDelaySeconds(el: Element | null): number {
        if (!el) return 0;
        const style = (el as HTMLElement).style;
        let raw = style.getPropertyValue('--reveal-delay');
        if (!raw) raw = getComputedStyle(el as HTMLElement).getPropertyValue('--reveal-delay');
        if (!raw) return 0;
        const v = raw.trim();
        if (v.endsWith('ms')) return parseFloat(v) / 1000;
        if (v.endsWith('s')) return parseFloat(v);
        const n = parseFloat(v);
        return isNaN(n) ? 0 : n / 1000;
    }

    function runProjectAnimations() {
        if (!motionOK) return;

        const title = document.querySelector('.project-title');
        const desc = document.querySelector('#Desc');
        const body = document.querySelector('.content-body');
        const photo = document.querySelector('.case-study-photos');

        const sequence: TimelineDefinition = [];
        if (title) {
            (title as HTMLElement).style.cssText = 'opacity:0; transform: translate3d(0,22px,0)';
            sequence.push([
                title,
                {
                    opacity: [0, 1],
                    transform: ['translate3d(0,22px,0)', 'translate3d(0,0,0)'],
                    filter: ['blur(2px)', 'blur(0)'],
                },
                { at: parseDelaySeconds(title) },
            ]);
        }
        if (desc) {
            (desc as HTMLElement).style.cssText = 'opacity:0; transform: translate3d(0,22px,0)';
            sequence.push([
                desc,
                {
                    opacity: [0, 1],
                    transform: ['translate3d(0,22px,0)', 'translate3d(0,0,0)'],
                    filter: ['blur(2px)', 'blur(0)'],
                },
                { at: parseDelaySeconds(desc) || 0.2 },
            ]);
        }
        if (body) {
            (body as HTMLElement).style.cssText = 'opacity:0; transform: translate3d(0,22px,0)';
            sequence.push([
                body,
                {
                    opacity: [0, 1],
                    transform: ['translate3d(0,22px,0)', 'translate3d(0,0,0)'],
                    filter: ['blur(2px)', 'blur(0)'],
                },
                { at: parseDelaySeconds(body) || 0.4 },
            ]);
        }
        if (photo) {
            (photo as HTMLElement).style.cssText = 'opacity:0; transform: translate3d(0,22px,0)';
            sequence.push([
                photo,
                {
                    opacity: [0, 1],
                    transform: ['translate3d(0,22px,0)', 'translate3d(0,0,0)'],
                    filter: ['blur(2px)', 'blur(0)'],
                },
                { at: parseDelaySeconds(photo) || 0.6 },
            ]);
        }

        if (sequence.length) timeline(sequence, { defaultOptions: { easing: glide(), duration: 0.9, delay: 0 } });
    }

    window.addEventListener('load', runProjectAnimations);
    document.addEventListener('astro:page-load', runProjectAnimations);
    document.addEventListener('astro:after-swap', runProjectAnimations);
</script>
