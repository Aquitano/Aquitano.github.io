---
export interface Props {
    active?: 'Home' | 'Über mich' | 'Projekte' | 'Kontakt';
    location?: string;
}

const { location = '/' } = Astro.props;

const menus = [
    { name: 'Home', href: location },
    { name: 'Über mich', href: `${location}timeline` },
    { name: 'Projekte', href: `${location}#portfolio` },
    { name: 'Kontakt', href: `${location}contact` },
].map((menu) => {
    return {
        ...menu,
        active: Astro.props.active === menu.name,
    };
});
---

<header class="fixed left-1/2 top-4 z-20 w-[calc(100%-2rem)] max-w-4xl -translate-x-1/2 transform">
    <div class="rounded-2xl border border-white/10 bg-black/10 px-6 py-4 shadow-2xl shadow-black/20 backdrop-blur-md">
        <div class="flex items-center justify-between">
            <a href="/" class="logo scroll-to group">
                <p class="text-lg font-bold text-white transition-colors duration-300 hover:text-gray-300">
                    Thomas Breindl
                </p>
            </a>

            <btn class="menu group cursor-pointer" style="cursor: pointer">
                <div class="flex items-center gap-3">
                    <span
                        class="hidden text-sm font-semibold uppercase tracking-wider text-white/80 transition-colors duration-200 group-hover:text-white sm:block"
                    >
                        Menu
                    </span>
                    <div class="relative h-6 w-6">
                        <div class="menu-lines">
                            <div class="h-0.5 w-6 bg-white/80 transition-all duration-200 group-hover:bg-white"></div>
                            <div class="mt-1.5 h-0.5 w-6 bg-white/80 transition-all duration-200 group-hover:bg-white">
                            </div>
                            <div class="mt-1.5 h-0.5 w-6 bg-white/80 transition-all duration-200 group-hover:bg-white">
                            </div>
                        </div>
                    </div>
                </div>
            </btn>
        </div>
    </div>
</header>

<!-- Menu -->
<nav
    id="nav"
    aria-label="loader"
    class="z-25 fixed inset-0 overflow-hidden transition-all duration-500 ease-out"
    style="height: 0;"
>
    <div class="menu-bg absolute inset-0 bg-black/95 backdrop-blur-xl"></div>
    <btn class="close group absolute right-8 top-8 hidden cursor-pointer">
        <div class="flex items-center gap-3">
            <span
                class="text-sm font-semibold uppercase tracking-wider text-white/80 transition-colors duration-200 group-hover:text-white"
            >
                Close
            </span>
            <div class="relative h-6 w-6">
                <div class="absolute inset-0 flex items-center justify-center">
                    <div class="h-0.5 w-6 rotate-45 bg-white/80 transition-colors duration-200 group-hover:bg-white">
                    </div>
                    <div
                        class="absolute h-0.5 w-6 -rotate-45 bg-white/80 transition-colors duration-200 group-hover:bg-white"
                    >
                    </div>
                </div>
            </div>
        </div>
    </btn>
</nav>

<nav id="nav-content" aria-label="menu">
    <div>
        <div class="content z-26 fixed inset-0 flex flex-col items-center justify-center" style="visibility: hidden;">
            <h5
                class="duration-400 mb-8 text-sm font-semibold uppercase tracking-wider text-gray-400 opacity-0 transition-opacity"
            >
                Menu
            </h5>
            <ul id="mi" class="space-y-4 text-center">
                {
                    menus.map((menu) => (
                        <li class="duration-400 opacity-0 transition-all">
                            <a
                                href={menu.href}
                                id={menu.name}
                                class={`block text-4xl font-bold text-white/70 transition-colors duration-300 hover:text-white md:text-6xl ${menu.active ? 'text-white' : ''}`}
                            >
                                {menu.name}
                            </a>
                        </li>
                    ))
                }
            </ul>
        </div>
    </div>
</nav>

<style>
    /* Custom styles for menu animations and states */
    .menu-lines {
        transition: transform 0.3s ease;
    }

    header.nav-on .menu-lines > div:nth-child(1) {
        transform: rotate(45deg) translate(6px, 6px);
    }

    header.nav-on .menu-lines > div:nth-child(2) {
        opacity: 0;
    }

    header.nav-on .menu-lines > div:nth-child(3) {
        transform: rotate(-45deg) translate(6px, -6px);
    }

    /* Menu overlay animations */
    nav#nav.on {
        height: 100vh !important;
    }

    nav#nav.on + #nav-content .content {
        visibility: visible !important;
    }

    nav#nav.on + #nav-content .content h5 {
        opacity: 1 !important;
        transition-delay: 0.4s;
    }

    nav#nav.on + #nav-content .content ul > li {
        opacity: 1 !important;
    }

    nav#nav.on + #nav-content .content ul > li:nth-child(1) {
        transition-delay: 0.3s;
    }

    nav#nav.on + #nav-content .content ul > li:nth-child(2) {
        transition-delay: 0.35s;
    }

    nav#nav.on + #nav-content .content ul > li:nth-child(3) {
        transition-delay: 0.4s;
    }

    nav#nav.on + #nav-content .content ul > li:nth-child(4) {
        transition-delay: 0.45s;
    }

    /* Smooth backdrop blur support */
    @supports (backdrop-filter: blur(16px)) {
        header > div {
            backdrop-filter: blur(16px);
            -webkit-backdrop-filter: blur(16px);
        }

        .menu-bg {
            backdrop-filter: blur(24px);
            -webkit-backdrop-filter: blur(24px);
        }
    }

    /* Fallback for browsers without backdrop-filter */
    @supports not (backdrop-filter: blur(16px)) {
        header > div {
            background-color: rgba(0, 0, 0, 0.8);
        }

        .menu-bg {
            background-color: rgba(0, 0, 0, 0.9);
        }
    }
</style>

<script>
    const $: (selector: string) => Element | null = (selector: string) => {
        document.querySelector(selector);
        return document.querySelector(selector);
    };

    function openNav() {
        //   let Height = window.screen.availHeight;
        if ($('a')?.classList.contains('Fade-out')) {
            $('a')?.classList.remove('Fade-out');
            $('b')?.classList.remove('Fade-out');
            $('#mi')?.classList.remove('Fade-out');
        }

        $('.close')?.classList.remove('hidden');
        $('nav')?.classList.add('on');
        $('header')?.classList.add('nav-on');
    }

    function closeNav() {
        $('a')?.classList.add('Fade-out');
        $('b')?.classList.add('Fade-out');
        $('#mi')?.classList.add('Fade-out');
        $('nav')?.classList.remove('on');
        $('header')?.classList.remove('nav-on');
        setTimeout(() => {
            $('.close')?.classList.add('hidden');
        }, 500);
    }

    function listener() {
        $('.menu')?.addEventListener('click', () => {
            openNav();

            $('.close')?.addEventListener(
                'click',
                () => {
                    closeNav();
                },
                { once: true },
            );
        });

        document.querySelectorAll('#mi > li > a').forEach((menu) => {
            menu.addEventListener('click', () => {
                closeNav();
            });
        });
    }

    document.addEventListener('astro:after-swap', () => {
        listener();
    });
    listener();
</script>
