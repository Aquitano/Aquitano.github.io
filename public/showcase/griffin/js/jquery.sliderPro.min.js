!(function (c, p) {
    'use strict';
    p.SliderPro = {
        modules: [],
        addModule: function (t, i) {
            this.modules.push(t), p.extend(o.prototype, i);
        },
    };
    var m = (p.SliderPro.namespace = 'SliderPro'),
        o = function (t, i) {
            (this.instance = t),
                (this.$slider = p(this.instance)),
                (this.$slides = null),
                (this.$slidesMask = null),
                (this.$slidesContainer = null),
                (this.slides = []),
                (this.slidesOrder = []),
                (this.options = i),
                (this.settings = {}),
                (this.originalSettings = {}),
                (this.originalGotoSlide = null),
                (this.selectedSlideIndex = 0),
                (this.previousSlideIndex = 0),
                (this.middleSlidePosition = 0),
                (this.supportedAnimation = null),
                (this.vendorPrefix = null),
                (this.transitionEvent = null),
                (this.positionProperty = null),
                (this.isIE = null),
                (this.slidesPosition = 0),
                (this.slideWidth = 0),
                (this.slideHeight = 0),
                (this.slideSize = 0),
                (this.previousSlideWidth = 0),
                (this.previousSlideHeight = 0),
                (this.previousWindowWidth = 0),
                (this.previousWindowHeight = 0),
                (this.visibleOffset = 0),
                (this.allowResize = !0),
                (this.uniqueId = new Date().valueOf()),
                (this.breakpoints = []),
                (this.currentBreakpoint = -1),
                (this.shuffledIndexes = []),
                this._init();
        };
    o.prototype = {
        _init: function () {
            var e = this;
            (this.supportedAnimation = f.getSupportedAnimation()),
                (this.vendorPrefix = f.getVendorPrefix()),
                (this.transitionEvent = f.getTransitionEvent()),
                (this.isIE = f.checkIE()),
                this.$slider.removeClass('sp-no-js'),
                c.navigator.userAgent.match(/(iPad|iPhone|iPod)/g) && this.$slider.addClass('ios');
            var t = /(msie) ([\w.]+)/.exec(c.navigator.userAgent.toLowerCase());
            this.isIE && this.$slider.addClass('ie'),
                null !== t && this.$slider.addClass('ie' + parseInt(t[2], 10)),
                (this.$slidesContainer = p('<div class="sp-slides-container"></div>').appendTo(this.$slider)),
                (this.$slidesMask = p('<div class="sp-mask"></div>').appendTo(this.$slidesContainer)),
                (this.$slides = this.$slider.find('.sp-slides').appendTo(this.$slidesMask)),
                this.$slider.find('.sp-slide').appendTo(this.$slides);
            var i = p.SliderPro.modules;
            if (void 0 !== i)
                for (var s = 0; s < i.length; s++) {
                    var n = i[s].substring(0, 1).toLowerCase() + i[s].substring(1) + 'Defaults';
                    void 0 !== this[n] && p.extend(this.defaults, this[n]);
                }
            if (((this.settings = p.extend({}, this.defaults, this.options)), void 0 !== i))
                for (var o = 0; o < i.length; o++) void 0 !== this['init' + i[o]] && this['init' + i[o]]();
            if (
                ((this.originalSettings = p.extend({}, this.settings)),
                (this.originalGotoSlide = this.gotoSlide),
                null !== this.settings.breakpoints)
            ) {
                for (var a in this.settings.breakpoints)
                    this.breakpoints.push({ size: parseInt(a, 10), properties: this.settings.breakpoints[a] });
                this.breakpoints = this.breakpoints.sort(function (t, i) {
                    return t.size >= i.size ? 1 : -1;
                });
            }
            if (((this.selectedSlideIndex = this.settings.startSlide), !0 === this.settings.shuffle)) {
                var h = this.$slides.find('.sp-slide'),
                    r = [];
                h.each(function (t) {
                    e.shuffledIndexes.push(t);
                });
                for (var l = this.shuffledIndexes.length - 1; 0 < l; l--) {
                    var d = Math.floor(Math.random() * (l + 1)),
                        u = this.shuffledIndexes[l];
                    (this.shuffledIndexes[l] = this.shuffledIndexes[d]), (this.shuffledIndexes[d] = u);
                }
                p.each(this.shuffledIndexes, function (t, i) {
                    r.push(h[i]);
                }),
                    this.$slides.empty().append(r);
            }
            p(c).on('resize.' + this.uniqueId + '.' + m, function () {
                var t = p(c).width(),
                    i = p(c).height();
                !1 === e.allowResize ||
                    (e.previousWindowWidth === t && e.previousWindowHeight === i) ||
                    ((e.previousWindowWidth = t),
                    (e.previousWindowHeight = i),
                    (e.allowResize = !1),
                    setTimeout(function () {
                        e.resize(), (e.allowResize = !0);
                    }, 200));
            }),
                this.on('update.' + m, function () {
                    (e.previousSlideWidth = 0), e.resize();
                }),
                this.update(),
                this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).addClass('sp-selected'),
                this.trigger({ type: 'init' }),
                p.isFunction(this.settings.init) && this.settings.init.call(this, { type: 'init' });
        },
        update: function () {
            var e = this;
            'horizontal' === this.settings.orientation
                ? (this.$slider.removeClass('sp-vertical').addClass('sp-horizontal'),
                  this.$slider.css({ height: '', 'max-height': '' }),
                  this.$slides.find('.sp-slide').css('top', ''))
                : 'vertical' === this.settings.orientation &&
                  (this.$slider.removeClass('sp-horizontal').addClass('sp-vertical'),
                  this.$slides.find('.sp-slide').css('left', '')),
                (this.positionProperty = 'horizontal' === this.settings.orientation ? 'left' : 'top'),
                (this.gotoSlide = this.originalGotoSlide);
            for (var t = this.slides.length - 1; 0 <= t; t--) {
                0 === this.$slider.find('.sp-slide[data-index="' + t + '"]').length &&
                    (this.slides[t].destroy(), this.slides.splice(t, 1));
            }
            (this.slidesOrder.length = 0),
                this.$slider.find('.sp-slide').each(function (t) {
                    var i = p(this);
                    void 0 === i.attr('data-init') ? e._createSlide(t, i) : e.slides[t].setIndex(t),
                        e.slidesOrder.push(t);
                }),
                (this.middleSlidePosition = parseInt((e.slidesOrder.length - 1) / 2, 10)),
                !0 === this.settings.loop && this._updateSlidesOrder(),
                this.trigger({ type: 'update' }),
                p.isFunction(this.settings.update) && this.settings.update.call(this, { type: 'update' });
        },
        _createSlide: function (t, i) {
            var e = new s(p(i), t, this.settings);
            this.slides.splice(t, 0, e);
        },
        _updateSlidesOrder: function () {
            var t,
                i,
                e = p.inArray(this.selectedSlideIndex, this.slidesOrder) - this.middleSlidePosition;
            if (e < 0)
                for (i = (t = this.slidesOrder.splice(e, Math.abs(e))).length - 1; 0 <= i; i--)
                    this.slidesOrder.unshift(t[i]);
            else if (0 < e)
                for (t = this.slidesOrder.splice(0, e), i = 0; i <= t.length - 1; i++) this.slidesOrder.push(t[i]);
        },
        _updateSlidesPosition: function () {
            for (
                var t = parseInt(
                        this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).css(this.positionProperty),
                        10,
                    ),
                    i = 0;
                i < this.slidesOrder.length;
                i++
            ) {
                this.$slides
                    .find('.sp-slide')
                    .eq(this.slidesOrder[i])
                    .css(
                        this.positionProperty,
                        t + (i - this.middleSlidePosition) * (this.slideSize + this.settings.slideDistance),
                    );
            }
        },
        _resetSlidesPosition: function () {
            for (var t = 0; t < this.slidesOrder.length; t++) {
                this.$slides
                    .find('.sp-slide')
                    .eq(this.slidesOrder[t])
                    .css(this.positionProperty, t * (this.slideSize + this.settings.slideDistance));
            }
            var i =
                -parseInt(this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).css(this.positionProperty), 10) +
                this.visibleOffset;
            this._moveTo(i, !0);
        },
        resize: function () {
            var e = this;
            if (null !== this.settings.breakpoints && 0 < this.breakpoints.length)
                if (p(c).width() > this.breakpoints[this.breakpoints.length - 1].size && -1 !== this.currentBreakpoint)
                    (this.currentBreakpoint = -1), this._setProperties(this.originalSettings, !1);
                else
                    for (var t = 0, i = this.breakpoints.length; t < i; t++)
                        if (p(c).width() <= this.breakpoints[t].size) {
                            if (this.currentBreakpoint === this.breakpoints[t].size) break;
                            var s = {
                                type: 'breakpointReach',
                                size: this.breakpoints[t].size,
                                settings: this.breakpoints[t].properties,
                            };
                            this.trigger(s),
                                p.isFunction(this.settings.breakpointReach) &&
                                    this.settings.breakpointReach.call(this, s),
                                (this.currentBreakpoint = this.breakpoints[t].size);
                            var n = p.extend({}, this.originalSettings, this.breakpoints[t].properties);
                            return void this._setProperties(n, !1);
                        }
            !0 === this.settings.responsive
                ? ('fullWidth' !== this.settings.forceSize && 'fullWindow' !== this.settings.forceSize) ||
                  ('auto' !== this.settings.visibleSize &&
                      ('auto' === this.settings.visibleSize || 'vertical' !== this.settings.orientation))
                    ? this.$slider.css({ width: '100%', 'max-width': this.settings.width, marginLeft: '' })
                    : (this.$slider.css('margin', 0),
                      this.$slider.css({
                          width: p(c).width(),
                          'max-width': '',
                          marginLeft: -this.$slider.offset().left,
                      }))
                : this.$slider.css({ width: this.settings.width }),
                -1 === this.settings.aspectRatio &&
                    (this.settings.aspectRatio = this.settings.width / this.settings.height),
                (this.slideWidth = this.$slider.width()),
                (this.slideHeight =
                    'fullWindow' === this.settings.forceSize
                        ? p(c).height()
                        : isNaN(this.settings.aspectRatio)
                        ? this.settings.height
                        : this.slideWidth / this.settings.aspectRatio),
                (this.previousSlideWidth !== this.slideWidth ||
                    this.previousSlideHeight !== this.slideHeight ||
                    'auto' !== this.settings.visibleSize ||
                    this.$slider.outerWidth() > this.$slider.parent().width() ||
                    this.$slider.width() !== this.$slidesMask.width()) &&
                    ((this.previousSlideWidth = this.slideWidth),
                    (this.previousSlideHeight = this.slideHeight),
                    (this.slideSize = 'horizontal' === this.settings.orientation ? this.slideWidth : this.slideHeight),
                    (this.visibleSlidesSize = this.slideSize),
                    (this.visibleOffset = 0),
                    p.each(this.slides, function (t, i) {
                        i.setSize(e.slideWidth, e.slideHeight);
                    }),
                    this.$slidesMask.css({ width: this.slideWidth, height: this.slideHeight }),
                    !0 === this.settings.autoHeight
                        ? setTimeout(function () {
                              e._resizeHeight();
                          }, 1)
                        : this.$slidesMask.css(this.vendorPrefix + 'transition', ''),
                    'auto' !== this.settings.visibleSize &&
                        ('horizontal' === this.settings.orientation
                            ? ('fullWidth' === this.settings.forceSize || 'fullWindow' === this.settings.forceSize
                                  ? (this.$slider.css('margin', 0),
                                    this.$slider.css({
                                        width: p(c).width(),
                                        'max-width': '',
                                        marginLeft: -this.$slider.offset().left,
                                    }))
                                  : this.$slider.css({
                                        width: this.settings.visibleSize,
                                        'max-width': '100%',
                                        marginLeft: 0,
                                    }),
                              this.$slidesMask.css('width', this.$slider.width()),
                              (this.visibleSlidesSize = this.$slidesMask.width()),
                              (this.visibleOffset = Math.round((this.$slider.width() - this.slideWidth) / 2)))
                            : (this.$slider.css(
                                  'fullWindow' === this.settings.forceSize
                                      ? { height: p(c).height(), 'max-height': '' }
                                      : { height: this.settings.visibleSize, 'max-height': '100%' },
                              ),
                              this.$slidesMask.css('height', this.$slider.height()),
                              (this.visibleSlidesSize = this.$slidesMask.height()),
                              (this.visibleOffset = Math.round((this.$slider.height() - this.slideHeight) / 2)))),
                    this._resetSlidesPosition(),
                    this.trigger({ type: 'sliderResize' }),
                    p.isFunction(this.settings.sliderResize) &&
                        this.settings.sliderResize.call(this, { type: 'sliderResize' }));
        },
        _resizeHeight: function () {
            var e = this,
                s = this.getSlideAt(this.selectedSlideIndex),
                t = s.getSize();
            s.off('imagesLoaded.' + m),
                s.on('imagesLoaded.' + m, function (t) {
                    var i;
                    t.index === e.selectedSlideIndex && ((i = s.getSize()), e._resizeHeightTo(i.height));
                }),
                'loading' !== t && this._resizeHeightTo(t.height);
        },
        gotoSlide: function (t) {
            var i, e;
            t !== this.selectedSlideIndex &&
                void 0 !== this.slides[t] &&
                (((i = this).previousSlideIndex = this.selectedSlideIndex),
                (this.selectedSlideIndex = t),
                this.$slides.find('.sp-selected').removeClass('sp-selected'),
                this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).addClass('sp-selected'),
                !0 === this.settings.loop && (this._updateSlidesOrder(), this._updateSlidesPosition()),
                !0 === this.settings.autoHeight && this._resizeHeight(),
                (e =
                    -parseInt(
                        this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).css(this.positionProperty),
                        10,
                    ) + this.visibleOffset),
                this._moveTo(e, !1, function () {
                    !0 === i.settings.loop && i._resetSlidesPosition(),
                        i.trigger({ type: 'gotoSlideComplete', index: t, previousIndex: i.previousSlideIndex }),
                        p.isFunction(i.settings.gotoSlideComplete) &&
                            i.settings.gotoSlideComplete.call(i, {
                                type: 'gotoSlideComplete',
                                index: t,
                                previousIndex: i.previousSlideIndex,
                            });
                }),
                this.trigger({ type: 'gotoSlide', index: t, previousIndex: this.previousSlideIndex }),
                p.isFunction(this.settings.gotoSlide) &&
                    this.settings.gotoSlide.call(this, {
                        type: 'gotoSlide',
                        index: t,
                        previousIndex: this.previousSlideIndex,
                    }));
        },
        nextSlide: function () {
            var t = this.selectedSlideIndex >= this.getTotalSlides() - 1 ? 0 : this.selectedSlideIndex + 1;
            this.gotoSlide(t);
        },
        previousSlide: function () {
            var t = this.selectedSlideIndex <= 0 ? this.getTotalSlides() - 1 : this.selectedSlideIndex - 1;
            this.gotoSlide(t);
        },
        _moveTo: function (t, i, e) {
            var s,
                n,
                o,
                a = this,
                h = {};
            t !== this.slidesPosition &&
                ((this.slidesPosition = t),
                ('css-3d' !== this.supportedAnimation && 'css-2d' !== this.supportedAnimation) || !1 !== this.isIE
                    ? ((h['margin-' + this.positionProperty] = t),
                      void 0 !== i && !0 === i
                          ? this.$slides.css(h)
                          : (this.$slides.addClass('sp-animated'),
                            this.$slides.animate(h, this.settings.slideAnimationDuration, function () {
                                a.$slides.removeClass('sp-animated'), 'function' == typeof e && e();
                            })))
                    : ((n = 'horizontal' === this.settings.orientation ? t : 0),
                      (o = 'horizontal' === this.settings.orientation ? 0 : t),
                      (h[this.vendorPrefix + 'transform'] =
                          'css-3d' === this.supportedAnimation
                              ? 'translate3d(' + n + 'px, ' + o + 'px, 0)'
                              : 'translate(' + n + 'px, ' + o + 'px)'),
                      void 0 !== i && !0 === i
                          ? (s = '')
                          : (this.$slides.addClass('sp-animated'),
                            (s = this.vendorPrefix + 'transform ' + this.settings.slideAnimationDuration / 1e3 + 's'),
                            this.$slides.on(this.transitionEvent, function (t) {
                                t.target === t.currentTarget &&
                                    (a.$slides.off(a.transitionEvent),
                                    a.$slides.removeClass('sp-animated'),
                                    'function' == typeof e && e());
                            })),
                      (h[this.vendorPrefix + 'transition'] = s),
                      this.$slides.css(h)));
        },
        _stopMovement: function () {
            var t,
                i,
                e,
                s,
                n,
                o = {};
            ('css-3d' !== this.supportedAnimation && 'css-2d' !== this.supportedAnimation) || !1 !== this.isIE
                ? (this.$slides.stop(),
                  (this.slidesPosition = parseInt(this.$slides.css('margin-' + this.positionProperty), 10)))
                : ((i =
                      -1 !== (t = this.$slides.css(this.vendorPrefix + 'transform')).indexOf('matrix3d')
                          ? 'matrix3d'
                          : 'matrix'),
                  (e = t.replace(i, '').match(/-?[0-9\.]+/g)),
                  (s = 'matrix3d' == i ? parseInt(e[12], 10) : parseInt(e[4], 10)),
                  (n = 'matrix3d' == i ? parseInt(e[13], 10) : parseInt(e[5], 10)),
                  (o[this.vendorPrefix + 'transform'] =
                      'css-3d' === this.supportedAnimation
                          ? 'translate3d(' + s + 'px, ' + n + 'px, 0)'
                          : 'translate(' + s + 'px, ' + n + 'px)'),
                  (o[this.vendorPrefix + 'transition'] = ''),
                  this.$slides.css(o),
                  this.$slides.off(this.transitionEvent),
                  (this.slidesPosition = 'horizontal' === this.settings.orientation ? s : n)),
                this.$slides.removeClass('sp-animated');
        },
        _resizeHeightTo: function (t) {
            var i = this,
                e = { height: t };
            'css-3d' === this.supportedAnimation || 'css-2d' === this.supportedAnimation
                ? ((e[this.vendorPrefix + 'transition'] =
                      'height ' + this.settings.heightAnimationDuration / 1e3 + 's'),
                  this.$slidesMask.off(this.transitionEvent),
                  this.$slidesMask.on(this.transitionEvent, function (t) {
                      t.target === t.currentTarget &&
                          (i.$slidesMask.off(i.transitionEvent),
                          i.trigger({ type: 'resizeHeightComplete' }),
                          p.isFunction(i.settings.resizeHeightComplete) &&
                              i.settings.resizeHeightComplete.call(i, { type: 'resizeHeightComplete' }));
                  }),
                  this.$slidesMask.css(e))
                : this.$slidesMask.stop().animate(e, this.settings.heightAnimationDuration, function () {
                      i.trigger({ type: 'resizeHeightComplete' }),
                          p.isFunction(i.settings.resizeHeightComplete) &&
                              i.settings.resizeHeightComplete.call(i, { type: 'resizeHeightComplete' });
                  });
        },
        destroy: function () {
            this.$slider.removeData('sliderPro'),
                this.$slider.removeAttr('style'),
                this.$slides.removeAttr('style'),
                this.off('update.' + m),
                p(c).off('resize.' + this.uniqueId + '.' + m);
            var t = p.SliderPro.modules;
            if (void 0 !== t)
                for (var i = 0; i < t.length; i++) void 0 !== this['destroy' + t[i]] && this['destroy' + t[i]]();
            p.each(this.slides, function (t, i) {
                i.destroy();
            }),
                (this.slides.length = 0),
                this.$slides.prependTo(this.$slider),
                this.$slidesContainer.remove();
        },
        _setProperties: function (t, i) {
            for (var e in t) (this.settings[e] = t[e]), !1 !== i && (this.originalSettings[e] = t[e]);
            this.update();
        },
        on: function (t, i) {
            return this.$slider.on(t, i);
        },
        off: function (t) {
            return this.$slider.off(t);
        },
        trigger: function (t) {
            return this.$slider.triggerHandler(t);
        },
        getSlideAt: function (t) {
            return this.slides[t];
        },
        getSelectedSlide: function () {
            return this.selectedSlideIndex;
        },
        getTotalSlides: function () {
            return this.slides.length;
        },
        defaults: {
            width: 500,
            height: 300,
            responsive: !0,
            aspectRatio: -1,
            imageScaleMode: 'cover',
            centerImage: !0,
            allowScaleUp: !0,
            autoHeight: !1,
            startSlide: 0,
            shuffle: !1,
            orientation: 'horizontal',
            forceSize: 'none',
            loop: !0,
            slideDistance: 10,
            slideAnimationDuration: 700,
            heightAnimationDuration: 700,
            visibleSize: 'auto',
            breakpoints: null,
            init: function () {},
            update: function () {},
            sliderResize: function () {},
            gotoSlide: function () {},
            gotoSlideComplete: function () {},
            resizeHeightComplete: function () {},
            breakpointReach: function () {},
        },
    };
    var s = function (t, i, e) {
        (this.$slide = t),
            (this.$mainImage = null),
            (this.$imageContainer = null),
            (this.hasMainImage = !1),
            (this.isMainImageLoaded = !1),
            (this.isMainImageLoading = !1),
            (this.hasImages = !1),
            (this.areImagesLoaded = !1),
            (this.width = 0),
            (this.height = 0),
            (this.settings = e),
            this.setIndex(i),
            this._init();
    };
    (s.prototype = {
        _init: function () {
            this.$slide.attr('data-init', !0),
                (this.$mainImage = 0 !== this.$slide.find('.sp-image').length ? this.$slide.find('.sp-image') : null),
                null !== this.$mainImage &&
                    ((this.hasMainImage = !0),
                    (this.$imageContainer = p('<div class="sp-image-container"></div>').prependTo(this.$slide)),
                    0 !== this.$mainImage.parent('a').length
                        ? this.$mainImage.parent('a').appendTo(this.$imageContainer)
                        : this.$mainImage.appendTo(this.$imageContainer)),
                (this.hasImages = 0 !== this.$slide.find('img').length);
        },
        setSize: function (t, i) {
            (this.width = t),
                (this.height = !0 === this.settings.autoHeight ? 'auto' : i),
                this.$slide.css({ width: this.width, height: this.height }),
                !0 === this.hasMainImage &&
                    (this.$imageContainer.css({ width: this.width, height: this.height }),
                    void 0 === this.$mainImage.attr('data-src') && this.resizeMainImage());
        },
        getSize: function () {
            var t,
                i = this;
            return !0 !== this.hasImages || !1 !== this.areImagesLoaded || void 0 !== this.$slide.attr('data-loading')
                ? { width: (t = this.calculateSize()).width, height: t.height }
                : (this.$slide.attr('data-loading', !0),
                  'complete' ===
                  f.checkImagesComplete(this.$slide, function () {
                      (i.areImagesLoaded = !0),
                          i.$slide.removeAttr('data-loading'),
                          i.trigger({ type: 'imagesLoaded.' + m, index: i.index });
                  })
                      ? { width: (t = this.calculateSize()).width, height: t.height }
                      : 'loading');
        },
        calculateSize: function () {
            var a = this.$slide.width(),
                h = this.$slide.height();
            return (
                this.$slide.children().each(function (t, i) {
                    var e,
                        s,
                        n,
                        o = p(i);
                    !0 !== o.is(':hidden') &&
                        ((e = i.getBoundingClientRect()),
                        (s = o.position().top + (e.bottom - e.top)),
                        (n = o.position().left + (e.right - e.left)),
                        h < s && (h = s),
                        a < n && (a = n));
                }),
                { width: a, height: h }
            );
        },
        resizeMainImage: function (t) {
            var i,
                e,
                s = this;
            if (
                (!0 === t && ((this.isMainImageLoaded = !1), (this.isMainImageLoading = !1)),
                !1 === this.isMainImageLoaded && !1 === this.isMainImageLoading)
            )
                return (
                    (this.isMainImageLoading = !0),
                    void f.checkImagesComplete(this.$mainImage, function () {
                        (s.isMainImageLoaded = !0),
                            (s.isMainImageLoading = !1),
                            s.resizeMainImage(),
                            s.trigger({ type: 'imagesLoaded.' + m, index: s.index });
                    })
                );
            !1 === this.settings.allowScaleUp &&
                (this.$mainImage.css({ width: '', height: '', maxWidth: '', maxHeight: '' }),
                (i = this.$mainImage.width()),
                (e = this.$mainImage.height()),
                this.$mainImage.css({ maxWidth: i, maxHeight: e })),
                !0 === this.settings.autoHeight
                    ? this.$mainImage.css({ width: '100%', height: 'auto' })
                    : 'cover' === this.settings.imageScaleMode
                    ? this.$mainImage.css(
                          this.$mainImage.width() / this.$mainImage.height() <= this.width / this.height
                              ? { width: '100%', height: 'auto' }
                              : { width: 'auto', height: '100%' },
                      )
                    : 'contain' === this.settings.imageScaleMode
                    ? this.$mainImage.css(
                          this.$mainImage.width() / this.$mainImage.height() >= this.width / this.height
                              ? { width: '100%', height: 'auto' }
                              : { width: 'auto', height: '100%' },
                      )
                    : 'exact' === this.settings.imageScaleMode &&
                      this.$mainImage.css({ width: '100%', height: '100%' }),
                !0 === this.settings.centerImage &&
                    this.$mainImage.css({
                        marginLeft: 0.5 * (this.$imageContainer.width() - this.$mainImage.width()),
                        marginTop: 0.5 * (this.$imageContainer.height() - this.$mainImage.height()),
                    });
        },
        destroy: function () {
            this.$slide.removeAttr('style'),
                this.$slide.removeAttr('data-init'),
                this.$slide.removeAttr('data-index'),
                this.$slide.removeAttr('data-loaded'),
                !0 === this.hasMainImage &&
                    (this.$slide.find('.sp-image').removeAttr('style').appendTo(this.$slide),
                    this.$slide.find('.sp-image-container').remove());
        },
        getIndex: function () {
            return this.index;
        },
        setIndex: function (t) {
            (this.index = t), this.$slide.attr('data-index', this.index);
        },
        on: function (t, i) {
            return this.$slide.on(t, i);
        },
        off: function (t) {
            return this.$slide.off(t);
        },
        trigger: function (t) {
            return this.$slide.triggerHandler(t);
        },
    }),
        (c.SliderPro = o),
        (c.SliderProSlide = s),
        (p.fn.sliderPro = function (s) {
            var n = Array.prototype.slice.call(arguments, 1);
            return this.each(function () {
                var t, i, e;
                void 0 === p(this).data('sliderPro')
                    ? ((t = new o(this, s)), p(this).data('sliderPro', t))
                    : void 0 !== s &&
                      ('function' == typeof (i = p(this).data('sliderPro'))[s]
                          ? i[s].apply(i, n)
                          : void 0 !== i.settings[s]
                          ? (((e = {})[s] = n[0]), i._setProperties(e))
                          : 'object' == typeof s
                          ? i._setProperties(s)
                          : p.error(s + ' does not exist in sliderPro.'));
            });
        });
    var f = {
        supportedAnimation: null,
        vendorPrefix: null,
        transitionEvent: null,
        isIE: null,
        getSupportedAnimation: function () {
            if (null !== this.supportedAnimation) return this.supportedAnimation;
            var t,
                i,
                e = (document.body || document.documentElement).style;
            return (
                !0 ==
                (void 0 !== e.transition ||
                    void 0 !== e.WebkitTransition ||
                    void 0 !== e.MozTransition ||
                    void 0 !== e.OTransition)
                    ? ((void 0 === (t = document.createElement('div')).style.WebkitPerspective &&
                          void 0 === t.style.perspective) ||
                          (this.supportedAnimation = 'css-3d'),
                      'css-3d' === this.supportedAnimation &&
                          void 0 !== t.styleWebkitPerspective &&
                          (((i = document.createElement('style')).textContent =
                              '@media (transform-3d),(-webkit-transform-3d){#test-3d{left:9px;position:absolute;height:5px;margin:0;padding:0;border:0;}}'),
                          document.getElementsByTagName('head')[0].appendChild(i),
                          (t.id = 'test-3d'),
                          document.body.appendChild(t),
                          (9 === t.offsetLeft && 5 === t.offsetHeight) || (this.supportedAnimation = null),
                          i.parentNode.removeChild(i),
                          t.parentNode.removeChild(t)),
                      null !== this.supportedAnimation ||
                          (void 0 === t.style['-webkit-transform'] && void 0 === t.style.transform) ||
                          (this.supportedAnimation = 'css-2d'))
                    : (this.supportedAnimation = 'javascript'),
                this.supportedAnimation
            );
        },
        getVendorPrefix: function () {
            if (null !== this.vendorPrefix) return this.vendorPrefix;
            var t = document.createElement('div'),
                i = ['Webkit', 'Moz', 'ms', 'O'];
            if ('transform' in t.style) return (this.vendorPrefix = ''), this.vendorPrefix;
            for (var e = 0; e < i.length; e++)
                if (i[e] + 'Transform' in t.style) {
                    this.vendorPrefix = '-' + i[e].toLowerCase() + '-';
                    break;
                }
            return this.vendorPrefix;
        },
        getTransitionEvent: function () {
            if (null !== this.transitionEvent) return this.transitionEvent;
            var t = document.createElement('div'),
                i = {
                    transition: 'transitionend',
                    WebkitTransition: 'webkitTransitionEnd',
                    MozTransition: 'transitionend',
                    OTransition: 'oTransitionEnd',
                };
            for (var e in i)
                if (e in t.style) {
                    this.transitionEvent = i[e];
                    break;
                }
            return this.transitionEvent;
        },
        checkImagesComplete: function (t, i) {
            var e,
                s = this,
                n = this.checkImagesStatus(t);
            return (
                'loading' === n
                    ? (e = setInterval(function () {
                          'complete' === (n = s.checkImagesStatus(t)) &&
                              (clearInterval(e), 'function' == typeof i && i());
                      }, 100))
                    : 'function' == typeof i && i(),
                n
            );
        },
        checkImagesStatus: function (t) {
            var i = 'complete';
            return (
                t.is('img') && !1 === t[0].complete
                    ? (i = 'loading')
                    : t.find('img').each(function () {
                          !1 === p(this)[0].complete && (i = 'loading');
                      }),
                i
            );
        },
        checkIE: function () {
            if (null !== this.isIE) return this.isIE;
            var t = c.navigator.userAgent;
            return (
                t.indexOf('MSIE'), (this.isIE = !(-1 === t.indexOf('MSIE') && !t.match(/Trident.*rv\:11\./))), this.isIE
            );
        },
    };
    c.SliderProUtils = f;
})(window, jQuery),
    (function (i, d) {
        'use strict';
        var n = 'Thumbnails.' + d.SliderPro.namespace,
            t = {
                $thumbnails: null,
                $thumbnailsContainer: null,
                thumbnails: null,
                selectedThumbnailIndex: 0,
                thumbnailsSize: 0,
                thumbnailsContainerSize: 0,
                thumbnailsPosition: 0,
                thumbnailsOrientation: null,
                thumbnailsPositionProperty: null,
                isThumbnailScroller: !1,
                initThumbnails: function () {
                    var i = this;
                    (this.thumbnails = []),
                        this.on('update.' + n, d.proxy(this._thumbnailsOnUpdate, this)),
                        this.on('sliderResize.' + n, d.proxy(this._thumbnailsOnResize, this)),
                        this.on('gotoSlide.' + n, function (t) {
                            i._gotoThumbnail(t.index);
                        });
                },
                _thumbnailsOnUpdate: function () {
                    var s,
                        n,
                        o = this;
                    if (0 !== this.$slider.find('.sp-thumbnail').length || 0 !== this.thumbnails.length) {
                        (this.isThumbnailScroller = !0),
                            null === this.$thumbnailsContainer &&
                                (this.$thumbnailsContainer = d(
                                    '<div class="sp-thumbnails-container"></div>',
                                ).insertAfter(this.$slidesContainer)),
                            null === this.$thumbnails &&
                                (0 !== this.$slider.find('.sp-thumbnails').length
                                    ? ((this.$thumbnails = this.$slider
                                          .find('.sp-thumbnails')
                                          .appendTo(this.$thumbnailsContainer)),
                                      !0 === this.settings.shuffle &&
                                          ((s = this.$thumbnails.find('.sp-thumbnail')),
                                          (n = []),
                                          d.each(this.shuffledIndexes, function (t, i) {
                                              var e = d(s[i]);
                                              0 !== e.parent('a').length && (e = e.parent('a')), n.push(e);
                                          }),
                                          this.$thumbnails.empty().append(n)))
                                    : (this.$thumbnails = d('<div class="sp-thumbnails"></div>').appendTo(
                                          this.$thumbnailsContainer,
                                      ))),
                            this.$slides.find('.sp-thumbnail').each(function () {
                                var t = d(this),
                                    i = t.parents('.sp-slide').index(),
                                    e = o.$thumbnails.find('.sp-thumbnail').length - 1;
                                0 !== t.parent('a').length && (t = t.parent('a')),
                                    e < i
                                        ? t.appendTo(o.$thumbnails)
                                        : t.insertBefore(o.$thumbnails.find('.sp-thumbnail').eq(i));
                            });
                        for (var t = this.thumbnails.length - 1; 0 <= t; t--) {
                            0 === this.$thumbnails.find('.sp-thumbnail[data-index="' + t + '"]').length &&
                                (this.thumbnails[t].destroy(), this.thumbnails.splice(t, 1));
                        }
                        this.$thumbnails.find('.sp-thumbnail').each(function (t) {
                            var i = d(this);
                            void 0 === i.attr('data-init') ? o._createThumbnail(i, t) : o.thumbnails[t].setIndex(t);
                        }),
                            this.$thumbnailsContainer.removeClass(
                                'sp-top-thumbnails sp-bottom-thumbnails sp-left-thumbnails sp-right-thumbnails',
                            ),
                            'top' === this.settings.thumbnailsPosition
                                ? (this.$thumbnailsContainer.addClass('sp-top-thumbnails'),
                                  (this.thumbnailsOrientation = 'horizontal'))
                                : 'bottom' === this.settings.thumbnailsPosition
                                ? (this.$thumbnailsContainer.addClass('sp-bottom-thumbnails'),
                                  (this.thumbnailsOrientation = 'horizontal'))
                                : 'left' === this.settings.thumbnailsPosition
                                ? (this.$thumbnailsContainer.addClass('sp-left-thumbnails'),
                                  (this.thumbnailsOrientation = 'vertical'))
                                : 'right' === this.settings.thumbnailsPosition &&
                                  (this.$thumbnailsContainer.addClass('sp-right-thumbnails'),
                                  (this.thumbnailsOrientation = 'vertical')),
                            !0 === this.settings.thumbnailPointer
                                ? this.$thumbnailsContainer.addClass('sp-has-pointer')
                                : this.$thumbnailsContainer.removeClass('sp-has-pointer'),
                            (this.selectedThumbnailIndex = this.selectedSlideIndex),
                            this.$thumbnails
                                .find('.sp-thumbnail-container')
                                .eq(this.selectedThumbnailIndex)
                                .addClass('sp-selected-thumbnail'),
                            (this.thumbnailsSize = 0),
                            d.each(this.thumbnails, function (t, i) {
                                i.setSize(o.settings.thumbnailWidth, o.settings.thumbnailHeight),
                                    (o.thumbnailsSize +=
                                        'horizontal' === o.thumbnailsOrientation
                                            ? i.getSize().width
                                            : i.getSize().height);
                            }),
                            'horizontal' === this.thumbnailsOrientation
                                ? (this.$thumbnails.css({
                                      width: this.thumbnailsSize,
                                      height: this.settings.thumbnailHeight,
                                  }),
                                  this.$thumbnailsContainer.css('height', ''),
                                  (this.thumbnailsPositionProperty = 'left'))
                                : (this.$thumbnails.css({
                                      width: this.settings.thumbnailWidth,
                                      height: this.thumbnailsSize,
                                  }),
                                  this.$thumbnailsContainer.css('width', ''),
                                  (this.thumbnailsPositionProperty = 'top')),
                            this.trigger({ type: 'thumbnailsUpdate' }),
                            d.isFunction(this.settings.thumbnailsUpdate) &&
                                this.settings.thumbnailsUpdate.call(this, { type: 'thumbnailsUpdate' });
                    } else this.isThumbnailScroller = !1;
                },
                _createThumbnail: function (t, i) {
                    var e = this,
                        s = new o(t, this.$thumbnails, i);
                    s.on('thumbnailClick.' + n, function (t) {
                        e.gotoSlide(t.index);
                    }),
                        this.thumbnails.splice(i, 0, s);
                },
                _thumbnailsOnResize: function () {
                    var t, e;
                    !1 !== this.isThumbnailScroller &&
                        ('horizontal' === (e = this).thumbnailsOrientation
                            ? ((this.thumbnailsContainerSize = Math.min(this.$slidesMask.width(), this.thumbnailsSize)),
                              this.$thumbnailsContainer.css('width', this.thumbnailsContainerSize),
                              'fullWindow' === this.settings.forceSize &&
                                  (this.$slidesMask.css(
                                      'height',
                                      this.$slidesMask.height() - this.$thumbnailsContainer.outerHeight(!0),
                                  ),
                                  (this.slideHeight = this.$slidesMask.height()),
                                  d.each(this.slides, function (t, i) {
                                      i.setSize(e.slideWidth, e.slideHeight);
                                  })))
                            : 'vertical' === this.thumbnailsOrientation &&
                              (this.$slidesMask.width() + this.$thumbnailsContainer.outerWidth(!0) >
                                  this.$slider.parent().width() &&
                                  ('fullWidth' === this.settings.forceSize || 'fullWindow' === this.settings.forceSize
                                      ? this.$slider.css(
                                            'max-width',
                                            d(i).width() - this.$thumbnailsContainer.outerWidth(!0),
                                        )
                                      : this.$slider.css(
                                            'max-width',
                                            this.$slider.parent().width() - this.$thumbnailsContainer.outerWidth(!0),
                                        ),
                                  this.$slidesMask.css('width', this.$slider.width()),
                                  'horizontal' === this.settings.orientation
                                      ? ((this.visibleOffset = Math.round((this.$slider.width() - this.slideSize) / 2)),
                                        (this.visibleSlidesSize = this.$slidesMask.width()))
                                      : 'vertical' === this.settings.orientation &&
                                        ((this.slideWidth = this.$slider.width()),
                                        d.each(this.slides, function (t, i) {
                                            i.setSize(e.slideWidth, e.slideHeight);
                                        })),
                                  this._resetSlidesPosition()),
                              (this.thumbnailsContainerSize = Math.min(this.$slidesMask.height(), this.thumbnailsSize)),
                              this.$thumbnailsContainer.css('height', this.thumbnailsContainerSize)),
                        (t =
                            this.thumbnailsSize <= this.thumbnailsContainerSize ||
                            0 === this.$thumbnails.find('.sp-selected-thumbnail').length
                                ? 0
                                : Math.max(
                                      -this.thumbnails[this.selectedThumbnailIndex].getPosition()[
                                          this.thumbnailsPositionProperty
                                      ],
                                      this.thumbnailsContainerSize - this.thumbnailsSize,
                                  )),
                        'top' === this.settings.thumbnailsPosition
                            ? this.$slider.css({
                                  paddingTop: this.$thumbnailsContainer.outerHeight(!0),
                                  paddingLeft: '',
                                  paddingRight: '',
                              })
                            : 'bottom' === this.settings.thumbnailsPosition
                            ? this.$slider.css({ paddingTop: '', paddingLeft: '', paddingRight: '' })
                            : 'left' === this.settings.thumbnailsPosition
                            ? this.$slider.css({
                                  paddingTop: '',
                                  paddingLeft: this.$thumbnailsContainer.outerWidth(!0),
                                  paddingRight: '',
                              })
                            : 'right' === this.settings.thumbnailsPosition &&
                              this.$slider.css({
                                  paddingTop: '',
                                  paddingLeft: '',
                                  paddingRight: this.$thumbnailsContainer.outerWidth(!0),
                              }),
                        this._moveThumbnailsTo(t, !0));
                },
                _gotoThumbnail: function (t) {
                    var i, e, s, n, o, a, h, r, l;
                    !1 !== this.isThumbnailScroller &&
                        void 0 !== this.thumbnails[t] &&
                        ((i = this.selectedThumbnailIndex),
                        (e = this.thumbnailsPosition),
                        (this.selectedThumbnailIndex = t),
                        this.$thumbnails.find('.sp-selected-thumbnail').removeClass('sp-selected-thumbnail'),
                        this.$thumbnails
                            .find('.sp-thumbnail-container')
                            .eq(this.selectedThumbnailIndex)
                            .addClass('sp-selected-thumbnail'),
                        this.selectedThumbnailIndex >= i
                            ? ((s =
                                  this.selectedThumbnailIndex === this.thumbnails.length - 1
                                      ? this.selectedThumbnailIndex
                                      : this.selectedThumbnailIndex + 1),
                              (n = this.thumbnails[s]),
                              (o =
                                  'horizontal' === this.thumbnailsOrientation
                                      ? n.getPosition().right
                                      : n.getPosition().bottom),
                              (a = -this.thumbnailsPosition + this.thumbnailsContainerSize) < o &&
                                  (e = this.thumbnailsPosition - (o - a)))
                            : this.selectedThumbnailIndex < i &&
                              ((h =
                                  0 === this.selectedThumbnailIndex
                                      ? this.selectedThumbnailIndex
                                      : this.selectedThumbnailIndex - 1),
                              (r = this.thumbnails[h]),
                              (l =
                                  'horizontal' === this.thumbnailsOrientation
                                      ? r.getPosition().left
                                      : r.getPosition().top) < -this.thumbnailsPosition && (e = -l)),
                        this._moveThumbnailsTo(e),
                        this.trigger({ type: 'gotoThumbnail' }),
                        d.isFunction(this.settings.gotoThumbnail) &&
                            this.settings.gotoThumbnail.call(this, { type: 'gotoThumbnail' }));
                },
                _moveThumbnailsTo: function (t, i, e) {
                    var s,
                        n,
                        o,
                        a = this,
                        h = {};
                    t !== this.thumbnailsPosition &&
                        ((this.thumbnailsPosition = t),
                        'css-3d' === this.supportedAnimation || 'css-2d' === this.supportedAnimation
                            ? ((n = 'horizontal' === this.thumbnailsOrientation ? t : 0),
                              (o = 'horizontal' === this.thumbnailsOrientation ? 0 : t),
                              (h[this.vendorPrefix + 'transform'] =
                                  'css-3d' === this.supportedAnimation
                                      ? 'translate3d(' + n + 'px, ' + o + 'px, 0)'
                                      : 'translate(' + n + 'px, ' + o + 'px)'),
                              void 0 !== i && !0 === i
                                  ? (s = '')
                                  : (this.$thumbnails.addClass('sp-animated'),
                                    (s = this.vendorPrefix + 'transform 0.7s'),
                                    this.$thumbnails.on(this.transitionEvent, function (t) {
                                        t.target === t.currentTarget &&
                                            (a.$thumbnails.off(a.transitionEvent),
                                            a.$thumbnails.removeClass('sp-animated'),
                                            'function' == typeof e && e(),
                                            a.trigger({ type: 'thumbnailsMoveComplete' }),
                                            d.isFunction(a.settings.thumbnailsMoveComplete) &&
                                                a.settings.thumbnailsMoveComplete.call(a, {
                                                    type: 'thumbnailsMoveComplete',
                                                }));
                                    })),
                              (h[this.vendorPrefix + 'transition'] = s),
                              this.$thumbnails.css(h))
                            : ((h['margin-' + this.thumbnailsPositionProperty] = t),
                              void 0 !== i && !0 === i
                                  ? this.$thumbnails.css(h)
                                  : this.$thumbnails.addClass('sp-animated').animate(h, 700, function () {
                                        a.$thumbnails.removeClass('sp-animated'),
                                            'function' == typeof e && e(),
                                            a.trigger({ type: 'thumbnailsMoveComplete' }),
                                            d.isFunction(a.settings.thumbnailsMoveComplete) &&
                                                a.settings.thumbnailsMoveComplete.call(a, {
                                                    type: 'thumbnailsMoveComplete',
                                                });
                                    })));
                },
                _stopThumbnailsMovement: function () {
                    var t,
                        i,
                        e,
                        s,
                        n,
                        o = {};
                    'css-3d' === this.supportedAnimation || 'css-2d' === this.supportedAnimation
                        ? ((i =
                              -1 !== (t = this.$thumbnails.css(this.vendorPrefix + 'transform')).indexOf('matrix3d')
                                  ? 'matrix3d'
                                  : 'matrix'),
                          (e = t.replace(i, '').match(/-?[0-9\.]+/g)),
                          (s = 'matrix3d' == i ? parseInt(e[12], 10) : parseInt(e[4], 10)),
                          (n = 'matrix3d' == i ? parseInt(e[13], 10) : parseInt(e[5], 10)),
                          (o[this.vendorPrefix + 'transform'] =
                              'css-3d' === this.supportedAnimation
                                  ? 'translate3d(' + s + 'px, ' + n + 'px, 0)'
                                  : 'translate(' + s + 'px, ' + n + 'px)'),
                          (o[this.vendorPrefix + 'transition'] = ''),
                          this.$thumbnails.css(o),
                          this.$thumbnails.off(this.transitionEvent),
                          (this.thumbnailsPosition =
                              'horizontal' === this.thumbnailsOrientation ? parseInt(e[4], 10) : parseInt(e[5], 10)))
                        : (this.$thumbnails.stop(),
                          (this.thumbnailsPosition = parseInt(
                              this.$thumbnails.css('margin-' + this.thumbnailsPositionProperty),
                              10,
                          ))),
                        this.$thumbnails.removeClass('sp-animated');
                },
                destroyThumbnails: function () {
                    var s = this;
                    this.off('update.' + n),
                        !1 !== this.isThumbnailScroller &&
                            (this.off('sliderResize.' + n),
                            this.off('gotoSlide.' + n),
                            d(i).off('resize.' + this.uniqueId + '.' + n),
                            this.$thumbnails.find('.sp-thumbnail').each(function () {
                                var t = d(this),
                                    i = parseInt(t.attr('data-index'), 10),
                                    e = s.thumbnails[i];
                                e.off('thumbnailClick.' + n), e.destroy();
                            }),
                            (this.thumbnails.length = 0),
                            this.$thumbnails.appendTo(this.$slider),
                            this.$thumbnailsContainer.remove(),
                            this.$slider.css({ paddingTop: '', paddingLeft: '', paddingRight: '' }));
                },
                thumbnailsDefaults: {
                    thumbnailWidth: 100,
                    thumbnailHeight: 80,
                    thumbnailsPosition: 'bottom',
                    thumbnailPointer: !1,
                    thumbnailsUpdate: function () {},
                    gotoThumbnail: function () {},
                    thumbnailsMoveComplete: function () {},
                },
            },
            o = function (t, i, e) {
                (this.$thumbnail = t),
                    (this.$thumbnails = i),
                    (this.$thumbnailContainer = null),
                    (this.width = 0),
                    (this.height = 0),
                    (this.isImageLoaded = !1),
                    this.setIndex(e),
                    this._init();
            };
        (o.prototype = {
            _init: function () {
                var t = this;
                this.$thumbnail.attr('data-init', !0),
                    (this.$thumbnailContainer = d('<div class="sp-thumbnail-container"></div>').appendTo(
                        this.$thumbnails,
                    )),
                    0 !== this.$thumbnail.parent('a').length
                        ? this.$thumbnail.parent('a').appendTo(this.$thumbnailContainer)
                        : this.$thumbnail.appendTo(this.$thumbnailContainer),
                    this.$thumbnailContainer.on('click.' + n, function () {
                        t.trigger({ type: 'thumbnailClick.' + n, index: t.index });
                    });
            },
            setSize: function (t, i) {
                (this.width = t),
                    (this.height = i),
                    this.$thumbnailContainer.css({ width: this.width, height: this.height }),
                    this.$thumbnail.is('img') && void 0 === this.$thumbnail.attr('data-src') && this.resizeImage();
            },
            getSize: function () {
                return {
                    width: this.$thumbnailContainer.outerWidth(!0),
                    height: this.$thumbnailContainer.outerHeight(!0),
                };
            },
            getPosition: function () {
                return {
                    left:
                        this.$thumbnailContainer.position().left +
                        parseInt(this.$thumbnailContainer.css('marginLeft'), 10),
                    right:
                        this.$thumbnailContainer.position().left +
                        parseInt(this.$thumbnailContainer.css('marginLeft'), 10) +
                        this.$thumbnailContainer.outerWidth(),
                    top:
                        this.$thumbnailContainer.position().top +
                        parseInt(this.$thumbnailContainer.css('marginTop'), 10),
                    bottom:
                        this.$thumbnailContainer.position().top +
                        parseInt(this.$thumbnailContainer.css('marginTop'), 10) +
                        this.$thumbnailContainer.outerHeight(),
                };
            },
            setIndex: function (t) {
                (this.index = t), this.$thumbnail.attr('data-index', this.index);
            },
            resizeImage: function () {
                var t,
                    i,
                    e = this;
                !1 !== this.isImageLoaded
                    ? ((this.$thumbnail = this.$thumbnailContainer.find('.sp-thumbnail')),
                      (t = this.$thumbnail.width()),
                      (i = this.$thumbnail.height()),
                      this.$thumbnail.css(
                          t / i <= this.width / this.height
                              ? { width: '100%', height: 'auto' }
                              : { width: 'auto', height: '100%' },
                      ),
                      this.$thumbnail.css({
                          marginLeft: 0.5 * (this.$thumbnailContainer.width() - this.$thumbnail.width()),
                          marginTop: 0.5 * (this.$thumbnailContainer.height() - this.$thumbnail.height()),
                      }))
                    : SliderProUtils.checkImagesComplete(this.$thumbnailContainer, function () {
                          (e.isImageLoaded = !0), e.resizeImage();
                      });
            },
            destroy: function () {
                this.$thumbnailContainer.off('click.' + n),
                    this.$thumbnail.removeAttr('data-init'),
                    this.$thumbnail.removeAttr('data-index'),
                    0 !== this.$thumbnail.parent('a').length
                        ? this.$thumbnail.parent('a').insertBefore(this.$thumbnailContainer)
                        : this.$thumbnail.insertBefore(this.$thumbnailContainer),
                    this.$thumbnailContainer.remove();
            },
            on: function (t, i) {
                return this.$thumbnailContainer.on(t, i);
            },
            off: function (t) {
                return this.$thumbnailContainer.off(t);
            },
            trigger: function (t) {
                return this.$thumbnailContainer.triggerHandler(t);
            },
        }),
            d.SliderPro.addModule('Thumbnails', t);
    })(window, jQuery),
    (function (n) {
        'use strict';
        var t = 'ConditionalImages.' + n.SliderPro.namespace,
            i = {
                previousImageSize: null,
                currentImageSize: null,
                isRetinaScreen: !1,
                initConditionalImages: function () {
                    (this.currentImageSize = this.previousImageSize = 'default'),
                        (this.isRetinaScreen = void 0 !== this._isRetina && !0 === this._isRetina()),
                        this.on('update.' + t, n.proxy(this._conditionalImagesOnUpdate, this)),
                        this.on('sliderResize.' + t, n.proxy(this._conditionalImagesOnResize, this));
                },
                _conditionalImagesOnUpdate: function () {
                    n.each(this.slides, function (t, i) {
                        i.$slide.find('img:not([ data-default ])').each(function () {
                            var t = n(this);
                            void 0 !== t.attr('data-src')
                                ? t.attr('data-default', t.attr('data-src'))
                                : t.attr('data-default', t.attr('src'));
                        });
                    });
                },
                _conditionalImagesOnResize: function () {
                    var s;
                    (this.currentImageSize =
                        this.slideWidth <= this.settings.smallSize
                            ? 'small'
                            : this.slideWidth <= this.settings.mediumSize
                            ? 'medium'
                            : this.slideWidth <= this.settings.largeSize
                            ? 'large'
                            : 'default'),
                        this.previousImageSize !== this.currentImageSize &&
                            ((s = this),
                            n.each(this.slides, function (t, e) {
                                e.$slide.find('img').each(function () {
                                    var t = n(this),
                                        i = '';
                                    !0 === s.isRetinaScreen && void 0 !== t.attr('data-retina' + s.currentImageSize)
                                        ? ((i = t.attr('data-retina' + s.currentImageSize)),
                                          void 0 !== t.attr('data-retina') &&
                                              t.attr('data-retina') !== i &&
                                              t.attr('data-retina', i))
                                        : (!1 === s.isRetinaScreen ||
                                              (!0 === s.isRetinaScreen && void 0 === t.attr('data-retina'))) &&
                                          void 0 !== t.attr('data-' + s.currentImageSize) &&
                                          ((i = t.attr('data-' + s.currentImageSize)),
                                          void 0 !== t.attr('data-src') &&
                                              t.attr('data-src') !== i &&
                                              t.attr('data-src', i)),
                                        '' !== i &&
                                            void 0 === t.attr('data-src') &&
                                            t.attr('src') !== i &&
                                            s._loadConditionalImage(t, i, function (t) {
                                                t.hasClass('sp-image') && ((e.$mainImage = t), e.resizeMainImage(!0));
                                            });
                                });
                            }),
                            (this.previousImageSize = this.currentImageSize));
                },
                _loadConditionalImage: function (t, i, e) {
                    var s = n(new Image());
                    s.attr('class', t.attr('class')),
                        s.attr('style', t.attr('style')),
                        n.each(t.data(), function (t, i) {
                            s.attr('data-' + t, i);
                        }),
                        void 0 !== t.attr('width') && s.attr('width', t.attr('width')),
                        void 0 !== t.attr('height') && s.attr('height', t.attr('height')),
                        void 0 !== t.attr('alt') && s.attr('alt', t.attr('alt')),
                        void 0 !== t.attr('title') && s.attr('title', t.attr('title')),
                        s.attr('src', i),
                        s.insertAfter(t),
                        t.remove(),
                        (t = null),
                        'function' == typeof e && e(s);
                },
                destroyConditionalImages: function () {
                    this.off('update.' + t), this.off('sliderResize.' + t);
                },
                conditionalImagesDefaults: { smallSize: 480, mediumSize: 768, largeSize: 1024 },
            };
        n.SliderPro.addModule('ConditionalImages', i);
    })((window, jQuery)),
    (function (t, o) {
        'use strict';
        var i = 'Retina.' + o.SliderPro.namespace,
            e = {
                initRetina: function () {
                    !1 !== this._isRetina() &&
                        (this.on('update.' + i, o.proxy(this._checkRetinaImages, this)),
                        0 !== this.$slider.find('.sp-thumbnail').length &&
                            this.on('update.Thumbnails.' + i, o.proxy(this._checkRetinaThumbnailImages, this)));
                },
                _isRetina: function () {
                    return (
                        2 <= t.devicePixelRatio ||
                        !(
                            !t.matchMedia ||
                            !t.matchMedia('(-webkit-min-device-pixel-ratio: 2),(min-resolution: 2dppx)').matches
                        )
                    );
                },
                _checkRetinaImages: function () {
                    var s = this;
                    o.each(this.slides, function (t, i) {
                        var e = i.$slide;
                        void 0 === e.attr('data-retina-loaded') &&
                            (e.attr('data-retina-loaded', !0),
                            e.find('img[data-retina]').each(function () {
                                var t = o(this);
                                void 0 !== t.attr('data-src')
                                    ? t.attr('data-src', t.attr('data-retina'))
                                    : s._loadRetinaImage(t, function (t) {
                                          t.hasClass('sp-image') && ((i.$mainImage = t), i.resizeMainImage(!0));
                                      });
                            }));
                    });
                },
                _checkRetinaThumbnailImages: function () {
                    var s = this;
                    o.each(this.thumbnails, function (t, i) {
                        var e = i.$thumbnailContainer;
                        void 0 === e.attr('data-retina-loaded') &&
                            (e.attr('data-retina-loaded', !0),
                            e.find('img[data-retina]').each(function () {
                                var t = o(this);
                                void 0 !== t.attr('data-src')
                                    ? t.attr('data-src', t.attr('data-retina'))
                                    : s._loadRetinaImage(t, function (t) {
                                          t.hasClass('sp-thumbnail') && i.resizeImage();
                                      });
                            }));
                    });
                },
                _loadRetinaImage: function (t, i) {
                    var e,
                        s = !1,
                        n = '';
                    void 0 !== t.attr('data-retina') && ((s = !0), (n = t.attr('data-retina'))),
                        void 0 !== t.attr('data-src') &&
                            (!1 === s && (n = t.attr('data-src')), t.removeAttr('data-src')),
                        '' !== n &&
                            ((e = o(new Image())).attr('class', t.attr('class')),
                            e.attr('style', t.attr('style')),
                            o.each(t.data(), function (t, i) {
                                e.attr('data-' + t, i);
                            }),
                            void 0 !== t.attr('width') && e.attr('width', t.attr('width')),
                            void 0 !== t.attr('height') && e.attr('height', t.attr('height')),
                            void 0 !== t.attr('alt') && e.attr('alt', t.attr('alt')),
                            void 0 !== t.attr('title') && e.attr('title', t.attr('title')),
                            e.insertAfter(t),
                            t.remove(),
                            (t = null),
                            e.attr('src', n),
                            'function' == typeof i && i(e));
                },
                destroyRetina: function () {
                    this.off('update.' + i), this.off('update.Thumbnails.' + i);
                },
            };
        o.SliderPro.addModule('Retina', e);
    })(window, jQuery),
    (function (a) {
        'use strict';
        var t = 'LazyLoading.' + a.SliderPro.namespace,
            i = {
                allowLazyLoadingCheck: !0,
                initLazyLoading: function () {
                    this.on('sliderResize.' + t, a.proxy(this._lazyLoadingOnResize, this)),
                        this.on('gotoSlide.' + t, a.proxy(this._checkAndLoadVisibleImages, this)),
                        this.on(
                            'thumbnailsUpdate.' + t + ' thumbnailsMoveComplete.' + t,
                            a.proxy(this._checkAndLoadVisibleThumbnailImages, this),
                        );
                },
                _lazyLoadingOnResize: function () {
                    var t = this;
                    !1 !== this.allowLazyLoadingCheck &&
                        ((this.allowLazyLoadingCheck = !1),
                        this._checkAndLoadVisibleImages(),
                        0 !== this.$slider.find('.sp-thumbnail').length && this._checkAndLoadVisibleThumbnailImages(),
                        setTimeout(function () {
                            t.allowLazyLoadingCheck = !0;
                        }, 500));
                },
                _checkAndLoadVisibleImages: function () {
                    var n, t, i, e, s, o;
                    0 !== this.$slider.find('.sp-slide:not([ data-loaded ])').length &&
                        ((e =
                            0 <
                            (t = !0 === (n = this).settings.loop ? this.middleSlidePosition : this.selectedSlideIndex) -
                                (i = Math.ceil((this.visibleSlidesSize - this.slideSize) / 2 / this.slideSize)) -
                                1
                                ? t - i - 1
                                : 0),
                        (s = t + i + 1 < this.getTotalSlides() - 1 ? t + i + 1 : this.getTotalSlides() - 1),
                        (o = this.slidesOrder.slice(e, s + 1)),
                        a.each(o, function (t, i) {
                            var e = n.slides[i],
                                s = e.$slide;
                            void 0 === s.attr('data-loaded') &&
                                (s.attr('data-loaded', !0),
                                s.find('img[ data-src ]').each(function () {
                                    var t = a(this);
                                    n._loadImage(t, function (t) {
                                        t.hasClass('sp-image') && ((e.$mainImage = t), e.resizeMainImage(!0));
                                    });
                                }));
                        }));
                },
                _checkAndLoadVisibleThumbnailImages: function () {
                    var s, t, i, e, n;
                    0 !== this.$slider.find('.sp-thumbnail-container:not([ data-loaded ])').length &&
                        ((t = (s = this).thumbnailsSize / this.thumbnails.length),
                        (i = Math.floor(Math.abs(this.thumbnailsPosition / t))),
                        (e = Math.floor((-this.thumbnailsPosition + this.thumbnailsContainerSize) / t)),
                        (n = this.thumbnails.slice(i, e + 1)),
                        a.each(n, function (t, i) {
                            var e = i.$thumbnailContainer;
                            void 0 === e.attr('data-loaded') &&
                                (e.attr('data-loaded', !0),
                                e.find('img[ data-src ]').each(function () {
                                    var t = a(this);
                                    s._loadImage(t, function () {
                                        i.resizeImage();
                                    });
                                }));
                        }));
                },
                _loadImage: function (t, i) {
                    var e = a(new Image());
                    e.attr('class', t.attr('class')),
                        e.attr('style', t.attr('style')),
                        a.each(t.data(), function (t, i) {
                            e.attr('data-' + t, i);
                        }),
                        void 0 !== t.attr('width') && e.attr('width', t.attr('width')),
                        void 0 !== t.attr('height') && e.attr('height', t.attr('height')),
                        void 0 !== t.attr('alt') && e.attr('alt', t.attr('alt')),
                        void 0 !== t.attr('title') && e.attr('title', t.attr('title')),
                        e.attr('src', t.attr('data-src')),
                        e.removeAttr('data-src'),
                        e.insertAfter(t),
                        t.remove(),
                        (t = null),
                        'function' == typeof i && i(e);
                },
                destroyLazyLoading: function () {
                    this.off('update.' + t),
                        this.off('gotoSlide.' + t),
                        this.off('sliderResize.' + t),
                        this.off('thumbnailsUpdate.' + t),
                        this.off('thumbnailsMoveComplete.' + t);
                },
            };
        a.SliderPro.addModule('LazyLoading', i);
    })((window, jQuery)),
    (function (t, h) {
        'use strict';
        var s = 'Layers.' + h.SliderPro.namespace,
            i = {
                layersGotoSlideReference: null,
                waitForLayersTimer: null,
                initLayers: function () {
                    this.on('update.' + s, h.proxy(this._layersOnUpdate, this)),
                        this.on('sliderResize.' + s, h.proxy(this._layersOnResize, this)),
                        this.on('gotoSlide.' + s, h.proxy(this._layersOnGotoSlide, this));
                },
                _layersOnUpdate: function () {
                    var t = this;
                    h.each(this.slides, function (t, i) {
                        i.$slide,
                            this.$slide.find('.sp-layer:not([ data-layer-init ])').each(function () {
                                var t = new n(h(this));
                                void 0 === i.layers && (i.layers = []),
                                    i.layers.push(t),
                                    !1 === h(this).hasClass('sp-static') &&
                                        (void 0 === i.animatedLayers && (i.animatedLayers = []),
                                        i.animatedLayers.push(t));
                            });
                    }),
                        !0 === this.settings.waitForLayers &&
                            (clearTimeout(this.waitForLayersTimer),
                            (this.waitForLayersTimer = setTimeout(function () {
                                (t.layersGotoSlideReference = t.gotoSlide), (t.gotoSlide = t._layersGotoSlide);
                            }, 1))),
                        setTimeout(function () {
                            t.showLayers(t.selectedSlideIndex);
                        }, 1);
                },
                _layersOnResize: function () {
                    var t,
                        e,
                        i = this.settings.autoScaleLayers;
                    !1 !== this.settings.autoScaleLayers &&
                        (-1 === this.settings.autoScaleReference
                            ? 'string' == typeof this.settings.width && -1 !== this.settings.width.indexOf('%')
                                ? (i = !1)
                                : (t = parseInt(this.settings.width, 10))
                            : (t = this.settings.autoScaleReference),
                        (e = !0 === i && this.slideWidth < t ? this.slideWidth / t : 1),
                        h.each(this.slides, function (t, i) {
                            void 0 !== i.layers &&
                                h.each(i.layers, function (t, i) {
                                    i.scale(e);
                                });
                        }));
                },
                _layersGotoSlide: function (t) {
                    var i = this,
                        e = this.slides[this.selectedSlideIndex].animatedLayers;
                    this.$slider.hasClass('sp-swiping') || void 0 === e || 0 === e.length
                        ? this.layersGotoSlideReference(t)
                        : (this.on('hideLayersComplete.' + s, function () {
                              i.off('hideLayersComplete.' + s), i.layersGotoSlideReference(t);
                          }),
                          this.hideLayers(this.selectedSlideIndex));
                },
                _layersOnGotoSlide: function () {
                    this.previousSlideIndex !== this.selectedSlideIndex &&
                        !1 === this.settings.waitForLayers &&
                        this.hideLayers(this.previousSlideIndex),
                        this.showLayers(this.selectedSlideIndex);
                },
                showLayers: function (t) {
                    var e = this,
                        s = this.slides[t].animatedLayers,
                        n = 0;
                    void 0 !== s &&
                        h.each(s, function (t, i) {
                            !0 === i.isVisible()
                                ? ++n === s.length &&
                                  (e.trigger({ type: 'showLayersComplete', index: t }),
                                  h.isFunction(e.settings.showLayersComplete) &&
                                      e.settings.showLayersComplete.call(e, { type: 'showLayersComplete', index: t }))
                                : i.show(function () {
                                      ++n === s.length &&
                                          (e.trigger({ type: 'showLayersComplete', index: t }),
                                          h.isFunction(e.settings.showLayersComplete) &&
                                              e.settings.showLayersComplete.call(e, {
                                                  type: 'showLayersComplete',
                                                  index: t,
                                              }));
                                  });
                        });
                },
                hideLayers: function (t) {
                    var e = this,
                        s = this.slides[t].animatedLayers,
                        n = 0;
                    void 0 !== s &&
                        h.each(s, function (t, i) {
                            !1 === i.isVisible()
                                ? ++n === s.length &&
                                  (e.trigger({ type: 'hideLayersComplete', index: t }),
                                  h.isFunction(e.settings.hideLayersComplete) &&
                                      e.settings.hideLayersComplete.call(e, { type: 'hideLayersComplete', index: t }))
                                : i.hide(function () {
                                      ++n === s.length &&
                                          (e.trigger({ type: 'hideLayersComplete', index: t }),
                                          h.isFunction(e.settings.hideLayersComplete) &&
                                              e.settings.hideLayersComplete.call(e, {
                                                  type: 'hideLayersComplete',
                                                  index: t,
                                              }));
                                  });
                        });
                },
                destroyLayers: function () {
                    this.off('update.' + s),
                        this.off('resize.' + s),
                        this.off('gotoSlide.' + s),
                        this.off('hideLayersComplete.' + s);
                },
                layersDefaults: {
                    waitForLayers: !1,
                    autoScaleLayers: !0,
                    autoScaleReference: -1,
                    showLayersComplete: function () {},
                    hideLayersComplete: function () {},
                },
            },
            e = t.SliderProSlide.prototype.destroy;
        t.SliderProSlide.prototype.destroy = function () {
            void 0 !== this.layers &&
                (h.each(this.layers, function (t, i) {
                    i.destroy();
                }),
                (this.layers.length = 0)),
                void 0 !== this.animatedLayers && (this.animatedLayers.length = 0),
                e.apply(this);
        };
        var n = function (t) {
            (this.$layer = t),
                (this.visible = !1),
                (this.styled = !1),
                (this.data = null),
                (this.position = null),
                (this.horizontalProperty = null),
                (this.verticalProperty = null),
                (this.horizontalPosition = null),
                (this.verticalPosition = null),
                (this.scaleRatio = 1),
                (this.supportedAnimation = SliderProUtils.getSupportedAnimation()),
                (this.vendorPrefix = SliderProUtils.getVendorPrefix()),
                (this.transitionEvent = SliderProUtils.getTransitionEvent()),
                (this.stayTimer = null),
                this._init();
        };
        (n.prototype = {
            _init: function () {
                this.$layer.attr('data-layer-init', !0),
                    this.$layer.hasClass('sp-static') ? this._setStyle() : this.$layer.css({ visibility: 'hidden' });
            },
            _setStyle: function () {
                (this.styled = !0),
                    (this.data = this.$layer.data()),
                    void 0 !== this.data.width && this.$layer.css('width', this.data.width),
                    void 0 !== this.data.height && this.$layer.css('height', this.data.height),
                    void 0 !== this.data.depth && this.$layer.css('z-index', this.data.depth),
                    (this.position = this.data.position ? this.data.position.toLowerCase() : 'topleft'),
                    (this.horizontalProperty =
                        -1 !== this.position.indexOf('right')
                            ? 'right'
                            : -1 !== this.position.indexOf('left')
                            ? 'left'
                            : 'center'),
                    (this.verticalProperty =
                        -1 !== this.position.indexOf('bottom')
                            ? 'bottom'
                            : -1 !== this.position.indexOf('top')
                            ? 'top'
                            : 'center'),
                    this._setPosition(),
                    this.scale(this.scaleRatio);
            },
            _setPosition: function () {
                var t = this.$layer.attr('style');
                (this.horizontalPosition = void 0 !== this.data.horizontal ? this.data.horizontal : 0),
                    (this.verticalPosition = void 0 !== this.data.vertical ? this.data.vertical : 0),
                    'center' === this.horizontalProperty
                        ? (!1 === this.$layer.is('img') &&
                              (void 0 === t || (void 0 !== t && -1 === t.indexOf('width'))) &&
                              (this.$layer.css('white-space', 'nowrap'),
                              this.$layer.css('width', this.$layer.outerWidth(!0))),
                          this.$layer.css({
                              marginLeft: 'auto',
                              marginRight: 'auto',
                              left: this.horizontalPosition,
                              right: 0,
                          }))
                        : this.$layer.css(this.horizontalProperty, this.horizontalPosition),
                    'center' === this.verticalProperty
                        ? (!1 === this.$layer.is('img') &&
                              (void 0 === t || (void 0 !== t && -1 === t.indexOf('height'))) &&
                              (this.$layer.css('white-space', 'nowrap'),
                              this.$layer.css('height', this.$layer.outerHeight(!0))),
                          this.$layer.css({
                              marginTop: 'auto',
                              marginBottom: 'auto',
                              top: this.verticalPosition,
                              bottom: 0,
                          }))
                        : this.$layer.css(this.verticalProperty, this.verticalPosition);
            },
            scale: function (t) {
                var i, e, s;
                this.$layer.hasClass('sp-no-scale') ||
                    ((this.scaleRatio = t), !1 === this.styled) ||
                    ((i = 'center' === this.horizontalProperty ? 'left' : this.horizontalProperty),
                    (e = 'center' === this.verticalProperty ? 'top' : this.verticalProperty),
                    ((s = {})[this.vendorPrefix + 'transform-origin'] =
                        this.horizontalProperty + ' ' + this.verticalProperty),
                    (s[this.vendorPrefix + 'transform'] = 'scale(' + this.scaleRatio + ')'),
                    'string' != typeof this.horizontalPosition && (s[i] = this.horizontalPosition * this.scaleRatio),
                    'string' != typeof this.verticalPosition && (s[e] = this.verticalPosition * this.scaleRatio),
                    'string' == typeof this.data.width &&
                        -1 !== this.data.width.indexOf('%') &&
                        (s.width = (parseInt(this.data.width, 10) / this.scaleRatio).toString() + '%'),
                    'string' == typeof this.data.height &&
                        -1 !== this.data.height.indexOf('%') &&
                        (s.height = (parseInt(this.data.height, 10) / this.scaleRatio).toString() + '%'),
                    this.$layer.css(s));
            },
            show: function (i) {
                var e, t, s, n, o, a, h, r;
                !0 !== this.visible &&
                    (!(this.visible = !0) === this.styled && this._setStyle(),
                    (t = void 0 !== (e = this).data.showOffset ? this.data.showOffset : 50),
                    (s = void 0 !== this.data.showDuration ? this.data.showDuration / 1e3 : 0.4),
                    (n = void 0 !== this.data.showDelay ? this.data.showDelay : 10),
                    (o = void 0 !== e.data.stayDuration ? parseInt(e.data.stayDuration, 10) : -1),
                    'javascript' === this.supportedAnimation
                        ? this.$layer
                              .stop()
                              .delay(n)
                              .css({ opacity: 0, visibility: 'visible' })
                              .animate({ opacity: 1 }, 1e3 * s, function () {
                                  -1 !== o &&
                                      (e.stayTimer = setTimeout(function () {
                                          e.hide(), (e.stayTimer = null);
                                      }, o)),
                                      void 0 !== i && i();
                              })
                        : ((h = { opacity: 1 }),
                          (r = ''),
                          ((a = { opacity: 0, visibility: 'visible' })[this.vendorPrefix + 'transform'] =
                              'scale(' + this.scaleRatio + ')'),
                          (h[this.vendorPrefix + 'transform'] = 'scale(' + this.scaleRatio + ')'),
                          (h[this.vendorPrefix + 'transition'] = 'opacity ' + s + 's'),
                          void 0 !== this.data.showTransition &&
                              ('left' === this.data.showTransition
                                  ? (r = t + 'px, 0')
                                  : 'right' === this.data.showTransition
                                  ? (r = '-' + t + 'px, 0')
                                  : 'up' === this.data.showTransition
                                  ? (r = '0, ' + t + 'px')
                                  : 'down' === this.data.showTransition && (r = '0, -' + t + 'px'),
                              (a[this.vendorPrefix + 'transform'] +=
                                  'css-3d' === this.supportedAnimation
                                      ? ' translate3d(' + r + ', 0)'
                                      : ' translate(' + r + ')'),
                              (h[this.vendorPrefix + 'transform'] +=
                                  'css-3d' === this.supportedAnimation ? ' translate3d(0, 0, 0)' : ' translate(0, 0)'),
                              (h[this.vendorPrefix + 'transition'] +=
                                  ', ' + this.vendorPrefix + 'transform ' + s + 's')),
                          this.$layer.on(this.transitionEvent, function (t) {
                              t.target === t.currentTarget &&
                                  (e.$layer.off(e.transitionEvent).css(e.vendorPrefix + 'transition', ''),
                                  -1 !== o &&
                                      (e.stayTimer = setTimeout(function () {
                                          e.hide(), (e.stayTimer = null);
                                      }, o)),
                                  void 0 !== i && i());
                          }),
                          this.$layer.css(a),
                          setTimeout(function () {
                              e.$layer.css(h);
                          }, n)));
            },
            hide: function (i) {
                var e, t, s, n, o, a;
                !1 !== this.visible &&
                    ((t = void 0 !== (e = this).data.hideOffset ? this.data.hideOffset : 50),
                    (s = void 0 !== this.data.hideDuration ? this.data.hideDuration / 1e3 : 0.4),
                    (n = void 0 !== this.data.hideDelay ? this.data.hideDelay : 10),
                    (this.visible = !1),
                    null !== this.stayTimer && clearTimeout(this.stayTimer),
                    'javascript' === this.supportedAnimation
                        ? this.$layer
                              .stop()
                              .delay(n)
                              .animate({ opacity: 0 }, 1e3 * s, function () {
                                  h(this).css('visibility', 'hidden'), void 0 !== i && i();
                              })
                        : ((o = ''),
                          ((a = { opacity: 0 })[this.vendorPrefix + 'transform'] = 'scale(' + this.scaleRatio + ')'),
                          (a[this.vendorPrefix + 'transition'] = 'opacity ' + s + 's'),
                          void 0 !== this.data.hideTransition &&
                              ('left' === this.data.hideTransition
                                  ? (o = '-' + t + 'px, 0')
                                  : 'right' === this.data.hideTransition
                                  ? (o = t + 'px, 0')
                                  : 'up' === this.data.hideTransition
                                  ? (o = '0, -' + t + 'px')
                                  : 'down' === this.data.hideTransition && (o = '0, ' + t + 'px'),
                              (a[this.vendorPrefix + 'transform'] +=
                                  'css-3d' === this.supportedAnimation
                                      ? ' translate3d(' + o + ', 0)'
                                      : ' translate(' + o + ')'),
                              (a[this.vendorPrefix + 'transition'] +=
                                  ', ' + this.vendorPrefix + 'transform ' + s + 's')),
                          this.$layer.on(this.transitionEvent, function (t) {
                              t.target === t.currentTarget &&
                                  (e.$layer.off(e.transitionEvent).css(e.vendorPrefix + 'transition', ''),
                                  !1 === e.visible && e.$layer.css('visibility', 'hidden'),
                                  void 0 !== i && i());
                          }),
                          setTimeout(function () {
                              e.$layer.css(a);
                          }, n)));
            },
            isVisible: function () {
                return !1 !== this.visible && !this.$layer.is(':hidden');
            },
            destroy: function () {
                this.$layer.removeAttr('style'), this.$layer.removeAttr('data-layer-init');
            },
        }),
            h.SliderPro.addModule('Layers', i);
    })(window, jQuery),
    (function (i) {
        'use strict';
        var t = 'Fade.' + i.SliderPro.namespace,
            e = {
                fadeGotoSlideReference: null,
                initFade: function () {
                    this.on('update.' + t, i.proxy(this._fadeOnUpdate, this));
                },
                _fadeOnUpdate: function () {
                    !0 === this.settings.fade &&
                        ((this.fadeGotoSlideReference = this.gotoSlide), (this.gotoSlide = this._fadeGotoSlide));
                },
                _fadeGotoSlide: function (t) {
                    var n, o, a, h;
                    t !== this.selectedSlideIndex &&
                        (this.$slider.hasClass('sp-swiping')
                            ? this.fadeGotoSlideReference(t)
                            : ((a = this),
                              (h = t),
                              i.each(this.slides, function (t, i) {
                                  var e = i.getIndex(),
                                      s = i.$slide;
                                  e === h
                                      ? (s.css({ opacity: 0, left: 0, top: 0, 'z-index': 20 }), (n = s))
                                      : e === a.selectedSlideIndex
                                      ? (s.css({ opacity: 1, left: 0, top: 0, 'z-index': 10 }), (o = s))
                                      : s.css('visibility', 'hidden');
                              }),
                              (this.previousSlideIndex = this.selectedSlideIndex),
                              (this.selectedSlideIndex = t),
                              this.$slides.find('.sp-selected').removeClass('sp-selected'),
                              this.$slides.find('.sp-slide').eq(this.selectedSlideIndex).addClass('sp-selected'),
                              !0 === a.settings.loop && a._updateSlidesOrder(),
                              this._moveTo(this.visibleOffset, !0),
                              !0 === this.settings.fadeOutPreviousSlide && this._fadeSlideTo(o, 0),
                              this._fadeSlideTo(n, 1, function () {
                                  i.each(a.slides, function (t, i) {
                                      i.$slide.css({ visibility: '', opacity: '', 'z-index': '' });
                                  }),
                                      a._resetSlidesPosition(),
                                      a.trigger({
                                          type: 'gotoSlideComplete',
                                          index: t,
                                          previousIndex: a.previousSlideIndex,
                                      }),
                                      i.isFunction(a.settings.gotoSlideComplete) &&
                                          a.settings.gotoSlideComplete.call(a, {
                                              type: 'gotoSlideComplete',
                                              index: t,
                                              previousIndex: a.previousSlideIndex,
                                          });
                              }),
                              !0 === this.settings.autoHeight && this._resizeHeight(),
                              this.trigger({ type: 'gotoSlide', index: t, previousIndex: this.previousSlideIndex }),
                              i.isFunction(this.settings.gotoSlide) &&
                                  this.settings.gotoSlide.call(this, {
                                      type: 'gotoSlide',
                                      index: t,
                                      previousIndex: this.previousSlideIndex,
                                  })));
                },
                _fadeSlideTo: function (i, e, s) {
                    var n = this;
                    'css-3d' === this.supportedAnimation || 'css-2d' === this.supportedAnimation
                        ? (setTimeout(function () {
                              var t = { opacity: e };
                              (t[n.vendorPrefix + 'transition'] = 'opacity ' + n.settings.fadeDuration / 1e3 + 's'),
                                  i.css(t);
                          }, 100),
                          i.on(this.transitionEvent, function (t) {
                              t.target === t.currentTarget &&
                                  (i.off(n.transitionEvent),
                                  i.css(n.vendorPrefix + 'transition', ''),
                                  'function' == typeof s && s());
                          }))
                        : i.stop().animate({ opacity: e }, this.settings.fadeDuration, function () {
                              'function' == typeof s && s();
                          });
                },
                destroyFade: function () {
                    this.off('update.' + t),
                        null !== this.fadeGotoSlideReference && (this.gotoSlide = this.fadeGotoSlideReference);
                },
                fadeDefaults: { fade: !1, fadeOutPreviousSlide: !0, fadeDuration: 500 },
            };
        i.SliderPro.addModule('Fade', e);
    })((window, jQuery)),
    (function (a) {
        'use strict';
        var h = 'TouchSwipe.' + a.SliderPro.namespace,
            t = {
                touchStartPoint: { x: 0, y: 0 },
                touchEndPoint: { x: 0, y: 0 },
                touchDistance: { x: 0, y: 0 },
                touchStartPosition: 0,
                isTouchMoving: !1,
                touchSwipeEvents: { startEvent: '', moveEvent: '', endEvent: '' },
                initTouchSwipe: function () {
                    !1 !== this.settings.touchSwipe &&
                        ((this.touchSwipeEvents.startEvent = 'touchstart.' + h + ' mousedown.' + h),
                        (this.touchSwipeEvents.moveEvent = 'touchmove.' + h + ' mousemove.' + h),
                        (this.touchSwipeEvents.endEvent =
                            'touchend.' + this.uniqueId + '.' + h + ' mouseup.' + this.uniqueId + '.' + h),
                        this.$slidesMask.on(this.touchSwipeEvents.startEvent, a.proxy(this._onTouchStart, this)),
                        this.$slidesMask.on('dragstart.' + h, function (t) {
                            t.preventDefault();
                        }),
                        this.$slidesMask.addClass('sp-grab'));
                },
                _onTouchStart: function (t) {
                    var i;
                    1 <= a(t.target).closest('.sp-selectable').length ||
                        ((i = void 0 !== t.originalEvent.touches ? t.originalEvent.touches[0] : t.originalEvent),
                        void 0 === t.originalEvent.touches && t.preventDefault(),
                        a(t.target)
                            .parents('.sp-slide')
                            .find('a')
                            .one('click.' + h, function (t) {
                                t.preventDefault();
                            }),
                        (this.touchStartPoint.x = i.pageX || i.clientX),
                        (this.touchStartPoint.y = i.pageY || i.clientY),
                        (this.touchStartPosition = this.slidesPosition),
                        (this.touchDistance.x = this.touchDistance.y = 0),
                        this.$slides.hasClass('sp-animated') &&
                            ((this.isTouchMoving = !0),
                            this._stopMovement(),
                            (this.touchStartPosition = this.slidesPosition)),
                        this.$slidesMask.on(this.touchSwipeEvents.moveEvent, a.proxy(this._onTouchMove, this)),
                        a(document).on(this.touchSwipeEvents.endEvent, a.proxy(this._onTouchEnd, this)),
                        this.$slidesMask.removeClass('sp-grab').addClass('sp-grabbing'),
                        this.$slider.addClass('sp-swiping'));
                },
                _onTouchMove: function (t) {
                    var i = void 0 !== t.originalEvent.touches ? t.originalEvent.touches[0] : t.originalEvent;
                    (this.isTouchMoving = !0),
                        (this.touchEndPoint.x = i.pageX || i.clientX),
                        (this.touchEndPoint.y = i.pageY || i.clientY),
                        (this.touchDistance.x = this.touchEndPoint.x - this.touchStartPoint.x),
                        (this.touchDistance.y = this.touchEndPoint.y - this.touchStartPoint.y);
                    var e = 'horizontal' === this.settings.orientation ? this.touchDistance.x : this.touchDistance.y,
                        s = 'horizontal' === this.settings.orientation ? this.touchDistance.y : this.touchDistance.x;
                    Math.abs(e) > Math.abs(s) &&
                        (t.preventDefault(),
                        !1 === this.settings.loop &&
                            ((this.slidesPosition > this.touchStartPosition && 0 === this.selectedSlideIndex) ||
                                (this.slidesPosition < this.touchStartPosition &&
                                    this.selectedSlideIndex === this.getTotalSlides() - 1)) &&
                            (e *= 0.2),
                        this._moveTo(this.touchStartPosition + e, !0));
                },
                _onTouchEnd: function (t) {
                    var i,
                        e,
                        s,
                        n = this,
                        o = 'horizontal' === this.settings.orientation ? this.touchDistance.x : this.touchDistance.y;
                    this.$slidesMask.off(this.touchSwipeEvents.moveEvent),
                        a(document).off(this.touchSwipeEvents.endEvent),
                        this.$slidesMask.removeClass('sp-grabbing').addClass('sp-grab'),
                        (!1 === this.isTouchMoving ||
                            (!0 === this.isTouchMoving &&
                                Math.abs(this.touchDistance.x) < 10 &&
                                Math.abs(this.touchDistance.y) < 10)) &&
                            (a(t.target)
                                .parents('.sp-slide')
                                .find('a')
                                .off('click.' + h),
                            this.$slider.removeClass('sp-swiping')),
                        setTimeout(function () {
                            n.$slider.removeClass('sp-swiping');
                        }, 1),
                        !1 !== this.isTouchMoving &&
                            ((this.isTouchMoving = !1),
                            a(t.target)
                                .parents('.sp-slide')
                                .one('click', function (t) {
                                    t.preventDefault();
                                }),
                            (i =
                                -parseInt(
                                    this.$slides
                                        .find('.sp-slide')
                                        .eq(this.selectedSlideIndex)
                                        .css(this.positionProperty),
                                    10,
                                ) + this.visibleOffset),
                            Math.abs(o) < this.settings.touchSwipeThreshold
                                ? this._moveTo(i)
                                : ((e = o / (this.slideSize + this.settings.slideDistance)),
                                  (e = parseInt(e, 10) + (0 < e ? 1 : -1)),
                                  (s = this.slidesOrder[a.inArray(this.selectedSlideIndex, this.slidesOrder) - e]),
                                  !0 === this.settings.loop || void 0 !== s ? this.gotoSlide(s) : this._moveTo(i)));
                },
                destroyTouchSwipe: function () {
                    this.$slidesMask.off(this.touchSwipeEvents.startEvent),
                        this.$slidesMask.off(this.touchSwipeEvents.moveEvent),
                        this.$slidesMask.off('dragstart.' + h),
                        a(document).off(this.touchSwipeEvents.endEvent),
                        this.$slidesMask.removeClass('sp-grab');
                },
                touchSwipeDefaults: { touchSwipe: !0, touchSwipeThreshold: 50 },
            };
        a.SliderPro.addModule('TouchSwipe', t);
    })((window, jQuery)),
    (function (t) {
        'use strict';
        var i = 'Caption.' + t.SliderPro.namespace,
            e = {
                $captionContainer: null,
                captionContent: '',
                initCaption: function () {
                    this.on('update.' + i, t.proxy(this._captionOnUpdate, this)),
                        this.on('gotoSlide.' + i, t.proxy(this._updateCaptionContent, this));
                },
                _captionOnUpdate: function () {
                    (this.$captionContainer = this.$slider.find('.sp-caption-container')),
                        this.$slider.find('.sp-caption').length &&
                            0 === this.$captionContainer.length &&
                            ((this.$captionContainer = t('<div class="sp-caption-container"></div>').appendTo(
                                this.$slider,
                            )),
                            this._updateCaptionContent()),
                        this.$slides.find('.sp-caption').each(function () {
                            t(this).css('display', 'none');
                        });
                },
                _updateCaptionContent: function () {
                    var t = this,
                        i = this.$slider.find('.sp-slide').eq(this.selectedSlideIndex).find('.sp-caption'),
                        e = 0 !== i.length ? i.html() : '';
                    !0 === this.settings.fadeCaption
                        ? '' !== this.captionContent
                            ? (0 === parseFloat(this.$captionContainer.css('opacity'), 10) &&
                                  (this.$captionContainer.css(this.vendorPrefix + 'transition', ''),
                                  this.$captionContainer.css('opacity', 1)),
                              this._fadeCaptionTo(0, function () {
                                  '' !== (t.captionContent = e)
                                      ? (t.$captionContainer.html(t.captionContent), t._fadeCaptionTo(1))
                                      : t.$captionContainer.empty();
                              }))
                            : ((this.captionContent = e),
                              this.$captionContainer.html(this.captionContent),
                              this.$captionContainer.css('opacity', 0),
                              this._fadeCaptionTo(1))
                        : ((this.captionContent = e), this.$captionContainer.html(this.captionContent));
                },
                _fadeCaptionTo: function (i, e) {
                    var s = this;
                    'css-3d' === this.supportedAnimation || 'css-2d' === this.supportedAnimation
                        ? (setTimeout(function () {
                              var t = { opacity: i };
                              (t[s.vendorPrefix + 'transition'] =
                                  'opacity ' + s.settings.captionFadeDuration / 1e3 + 's'),
                                  s.$captionContainer.css(t);
                          }, 1),
                          this.$captionContainer.on(this.transitionEvent, function (t) {
                              t.target === t.currentTarget &&
                                  (s.$captionContainer.off(s.transitionEvent),
                                  s.$captionContainer.css(s.vendorPrefix + 'transition', ''),
                                  'function' == typeof e && e());
                          }))
                        : this.$captionContainer
                              .stop()
                              .animate({ opacity: i }, this.settings.captionFadeDuration, function () {
                                  'function' == typeof e && e();
                              });
                },
                destroyCaption: function () {
                    this.off('update.' + i),
                        this.off('gotoSlide.' + i),
                        this.$captionContainer.remove(),
                        this.$slider.find('.sp-caption').each(function () {
                            t(this).css('display', '');
                        });
                },
                captionDefaults: { fadeCaption: !0, captionFadeDuration: 500 },
            };
        t.SliderPro.addModule('Caption', e);
    })((window, jQuery)),
    (function (s, t) {
        'use strict';
        var i = 'DeepLinking.' + t.SliderPro.namespace,
            e = {
                initDeepLinking: function () {
                    var e = this;
                    this.on('init.' + i, function () {
                        e._gotoHash(s.location.hash);
                    }),
                        this.on('gotoSlide.' + i, function (t) {
                            var i;
                            !0 === e.settings.updateHash &&
                                (void 0 === (i = e.$slider.find('.sp-slide').eq(t.index).attr('id')) && (i = t.index),
                                (s.location.hash = e.$slider.attr('id') + '/' + i));
                        }),
                        t(s).on('hashchange.' + this.uniqueId + '.' + i, function () {
                            e._gotoHash(s.location.hash);
                        });
                },
                _parseHash: function (t) {
                    if ('' !== t) {
                        var i = (t = t.substring(1)).split('/').pop(),
                            e = t.slice(0, -i.toString().length - 1);
                        if (this.$slider.attr('id') === e) return { sliderID: e, slideId: i };
                    }
                    return !1;
                },
                _gotoHash: function (t) {
                    var i,
                        e,
                        s,
                        n = this._parseHash(t);
                    !1 !== n &&
                        ((i = n.slideId),
                        (e = parseInt(i, 10)),
                        isNaN(e)
                            ? -1 !== (s = this.$slider.find('.sp-slide#' + i).index()) &&
                              s !== this.selectedSlideIndex &&
                              this.gotoSlide(s)
                            : e !== this.selectedSlideIndex && this.gotoSlide(e));
                },
                destroyDeepLinking: function () {
                    this.off('init.' + i),
                        this.off('gotoSlide.' + i),
                        t(s).off('hashchange.' + this.uniqueId + '.' + i);
                },
                deepLinkingDefaults: { updateHash: !1 },
            };
        t.SliderPro.addModule('DeepLinking', e);
    })(window, jQuery),
    (function (t) {
        'use strict';
        var i = 'Autoplay.' + t.SliderPro.namespace,
            e = {
                autoplayTimer: null,
                isTimerRunning: !1,
                isTimerPaused: !1,
                initAutoplay: function () {
                    this.on('update.' + i, t.proxy(this._autoplayOnUpdate, this));
                },
                _autoplayOnUpdate: function () {
                    !0 === this.settings.autoplay
                        ? (this.on('gotoSlide.' + i, t.proxy(this._autoplayOnGotoSlide, this)),
                          this.on('mouseenter.' + i, t.proxy(this._autoplayOnMouseEnter, this)),
                          this.on('mouseleave.' + i, t.proxy(this._autoplayOnMouseLeave, this)),
                          this.startAutoplay())
                        : (this.off('gotoSlide.' + i),
                          this.off('mouseenter.' + i),
                          this.off('mouseleave.' + i),
                          this.stopAutoplay());
                },
                _autoplayOnGotoSlide: function () {
                    !0 === this.isTimerRunning && this.stopAutoplay(),
                        !1 === this.isTimerPaused && this.startAutoplay();
                },
                _autoplayOnMouseEnter: function () {
                    !this.isTimerRunning ||
                        ('pause' !== this.settings.autoplayOnHover && 'stop' !== this.settings.autoplayOnHover) ||
                        (this.stopAutoplay(), (this.isTimerPaused = !0));
                },
                _autoplayOnMouseLeave: function () {
                    !0 === this.settings.autoplay &&
                        !1 === this.isTimerRunning &&
                        'stop' !== this.settings.autoplayOnHover &&
                        (this.startAutoplay(), (this.isTimerPaused = !1));
                },
                startAutoplay: function () {
                    var t = this;
                    (this.isTimerRunning = !0),
                        (this.autoplayTimer = setTimeout(function () {
                            'normal' === t.settings.autoplayDirection
                                ? t.nextSlide()
                                : 'backwards' === t.settings.autoplayDirection && t.previousSlide();
                        }, this.settings.autoplayDelay));
                },
                stopAutoplay: function () {
                    (this.isTimerRunning = !1), (this.isTimerPaused = !1), clearTimeout(this.autoplayTimer);
                },
                destroyAutoplay: function () {
                    clearTimeout(this.autoplayTimer),
                        this.off('update.' + i),
                        this.off('gotoSlide.' + i),
                        this.off('mouseenter.' + i),
                        this.off('mouseleave.' + i);
                },
                autoplayDefaults: {
                    autoplay: !0,
                    autoplayDelay: 5e3,
                    autoplayDirection: 'normal',
                    autoplayOnHover: 'pause',
                },
            };
        t.SliderPro.addModule('Autoplay', e);
    })((window, jQuery)),
    (function (t) {
        'use strict';
        var s = 'Keyboard.' + t.SliderPro.namespace,
            i = {
                initKeyboard: function () {
                    var i = this,
                        e = !1;
                    !1 !== this.settings.keyboard &&
                        (this.$slider.on('focus.' + s, function () {
                            e = !0;
                        }),
                        this.$slider.on('blur.' + s, function () {
                            e = !1;
                        }),
                        t(document).on('keydown.' + this.uniqueId + '.' + s, function (t) {
                            (!0 === i.settings.keyboardOnlyOnFocus && !1 === e) ||
                                (37 === t.which
                                    ? i.previousSlide()
                                    : 39 === t.which
                                    ? i.nextSlide()
                                    : 13 === t.which &&
                                      i.$slider
                                          .find('.sp-slide')
                                          .eq(i.selectedSlideIndex)
                                          .find('.sp-image-container a')[0]
                                          .click());
                        }));
                },
                destroyKeyboard: function () {
                    this.$slider.off('focus.' + s),
                        this.$slider.off('blur.' + s),
                        t(document).off('keydown.' + this.uniqueId + '.' + s);
                },
                keyboardDefaults: { keyboard: !0, keyboardOnlyOnFocus: !1 },
            };
        t.SliderPro.addModule('Keyboard', i);
    })((window, jQuery)),
    (function (t) {
        'use strict';
        var i = 'FullScreen.' + t.SliderPro.namespace,
            e = {
                isFullScreen: !1,
                $fullScreenButton: null,
                sizeBeforeFullScreen: {},
                initFullScreen: function () {
                    (document.fullscreenEnabled ||
                        document.webkitFullscreenEnabled ||
                        document.mozFullScreenEnabled ||
                        document.msFullscreenEnabled) &&
                        this.on('update.' + i, t.proxy(this._fullScreenOnUpdate, this));
                },
                _fullScreenOnUpdate: function () {
                    !0 === this.settings.fullScreen && null === this.$fullScreenButton
                        ? this._addFullScreen()
                        : !1 === this.settings.fullScreen &&
                          null !== this.$fullScreenButton &&
                          this._removeFullScreen(),
                        !0 === this.settings.fullScreen &&
                            (!0 === this.settings.fadeFullScreen
                                ? this.$fullScreenButton.addClass('sp-fade-full-screen')
                                : !1 === this.settings.fadeFullScreen &&
                                  this.$fullScreenButton.removeClass('sp-fade-full-screen'));
                },
                _addFullScreen: function () {
                    (this.$fullScreenButton = t('<div class="sp-full-screen-button"></div>').appendTo(this.$slider)),
                        this.$fullScreenButton.on('click.' + i, t.proxy(this._onFullScreenButtonClick, this)),
                        document.addEventListener('fullscreenchange', t.proxy(this._onFullScreenChange, this)),
                        document.addEventListener('mozfullscreenchange', t.proxy(this._onFullScreenChange, this)),
                        document.addEventListener('webkitfullscreenchange', t.proxy(this._onFullScreenChange, this)),
                        document.addEventListener('MSFullscreenChange', t.proxy(this._onFullScreenChange, this));
                },
                _removeFullScreen: function () {
                    null !== this.$fullScreenButton &&
                        (this.$fullScreenButton.off('click.' + i),
                        this.$fullScreenButton.remove(),
                        (this.$fullScreenButton = null),
                        document.removeEventListener('fullscreenchange', this._onFullScreenChange),
                        document.removeEventListener('mozfullscreenchange', this._onFullScreenChange),
                        document.removeEventListener('webkitfullscreenchange', this._onFullScreenChange),
                        document.removeEventListener('MSFullscreenChange', this._onFullScreenChange));
                },
                _onFullScreenButtonClick: function () {
                    !1 === this.isFullScreen
                        ? this.instance.requestFullScreen
                            ? this.instance.requestFullScreen()
                            : this.instance.mozRequestFullScreen
                            ? this.instance.mozRequestFullScreen()
                            : this.instance.webkitRequestFullScreen
                            ? this.instance.webkitRequestFullScreen()
                            : this.instance.msRequestFullscreen && this.instance.msRequestFullscreen()
                        : document.exitFullScreen
                        ? document.exitFullScreen()
                        : document.mozCancelFullScreen
                        ? document.mozCancelFullScreen()
                        : document.webkitCancelFullScreen
                        ? document.webkitCancelFullScreen()
                        : document.msExitFullscreen && document.msExitFullscreen();
                },
                _onFullScreenChange: function () {
                    (this.isFullScreen = !!(
                        document.fullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement
                    )),
                        !0 === this.isFullScreen
                            ? ((this.sizeBeforeFullScreen = {
                                  forceSize: this.settings.forceSize,
                                  autoHeight: this.settings.autoHeight,
                              }),
                              this.$slider.addClass('sp-full-screen'),
                              (this.settings.forceSize = 'fullWindow'),
                              (this.settings.autoHeight = !1))
                            : (this.$slider.css('margin', ''),
                              this.$slider.removeClass('sp-full-screen'),
                              (this.settings.forceSize = this.sizeBeforeFullScreen.forceSize),
                              (this.settings.autoHeight = this.sizeBeforeFullScreen.autoHeight)),
                        this.resize();
                },
                destroyFullScreen: function () {
                    this.off('update.' + i), this._removeFullScreen();
                },
                fullScreenDefaults: { fullScreen: !1, fadeFullScreen: !0 },
            };
        t.SliderPro.addModule('FullScreen', e);
    })((window, jQuery)),
    (function (e) {
        'use strict';
        var s = 'Buttons.' + e.SliderPro.namespace,
            t = {
                $buttons: null,
                initButtons: function () {
                    this.on('update.' + s, e.proxy(this._buttonsOnUpdate, this));
                },
                _buttonsOnUpdate: function () {
                    (this.$buttons = this.$slider.find('.sp-buttons')),
                        !0 === this.settings.buttons && 1 < this.getTotalSlides() && 0 === this.$buttons.length
                            ? this._createButtons()
                            : !0 === this.settings.buttons &&
                              this.getTotalSlides() !== this.$buttons.find('.sp-button').length &&
                              0 !== this.$buttons.length
                            ? this._adjustButtons()
                            : (!1 === this.settings.buttons ||
                                  (this.getTotalSlides() <= 1 && 0 !== this.$buttons.length)) &&
                              this._removeButtons();
                },
                _createButtons: function () {
                    var i = this;
                    this.$buttons = e('<div class="sp-buttons"></div>').appendTo(this.$slider);
                    for (var t = 0; t < this.getTotalSlides(); t++)
                        e('<div class="sp-button"></div>').appendTo(this.$buttons);
                    this.$buttons.on('click.' + s, '.sp-button', function () {
                        i.gotoSlide(e(this).index());
                    }),
                        this.$buttons.find('.sp-button').eq(this.selectedSlideIndex).addClass('sp-selected-button'),
                        this.on('gotoSlide.' + s, function (t) {
                            i.$buttons.find('.sp-selected-button').removeClass('sp-selected-button'),
                                i.$buttons.find('.sp-button').eq(t.index).addClass('sp-selected-button');
                        }),
                        this.$slider.addClass('sp-has-buttons');
                },
                _adjustButtons: function () {
                    this.$buttons.empty();
                    for (var t = 0; t < this.getTotalSlides(); t++)
                        e('<div class="sp-button"></div>').appendTo(this.$buttons);
                    this.$buttons.find('.sp-selected-button').removeClass('sp-selected-button'),
                        this.$buttons.find('.sp-button').eq(this.selectedSlideIndex).addClass('sp-selected-button');
                },
                _removeButtons: function () {
                    this.$buttons.off('click.' + s, '.sp-button'),
                        this.off('gotoSlide.' + s),
                        this.$buttons.remove(),
                        this.$slider.removeClass('sp-has-buttons');
                },
                destroyButtons: function () {
                    this._removeButtons(), this.off('update.' + s);
                },
                buttonsDefaults: { buttons: !0 },
            };
        e.SliderPro.addModule('Buttons', t);
    })((window, jQuery)),
    (function (i) {
        'use strict';
        var e = 'Arrows.' + i.SliderPro.namespace,
            t = {
                $arrows: null,
                $previousArrow: null,
                $nextArrow: null,
                initArrows: function () {
                    this.on('update.' + e, i.proxy(this._arrowsOnUpdate, this)),
                        this.on('gotoSlide.' + e, i.proxy(this._checkArrowsVisibility, this));
                },
                _arrowsOnUpdate: function () {
                    var t = this;
                    !0 === this.settings.arrows && null === this.$arrows
                        ? ((this.$arrows = i('<div class="sp-arrows"></div>').appendTo(this.$slidesContainer)),
                          (this.$previousArrow = i('<div class="sp-arrow sp-previous-arrow"></div>').appendTo(
                              this.$arrows,
                          )),
                          (this.$nextArrow = i('<div class="sp-arrow sp-next-arrow"></div>').appendTo(this.$arrows)),
                          this.$previousArrow.on('click.' + e, function () {
                              t.previousSlide();
                          }),
                          this.$nextArrow.on('click.' + e, function () {
                              t.nextSlide();
                          }),
                          this._checkArrowsVisibility())
                        : !1 === this.settings.arrows && null !== this.$arrows && this._removeArrows(),
                        !0 === this.settings.arrows &&
                            (!0 === this.settings.fadeArrows
                                ? this.$arrows.addClass('sp-fade-arrows')
                                : !1 === this.settings.fadeArrows && this.$arrows.removeClass('sp-fade-arrows'));
                },
                _checkArrowsVisibility: function () {
                    !1 !== this.settings.arrows &&
                        !0 !== this.settings.loop &&
                        (0 === this.selectedSlideIndex
                            ? this.$previousArrow.css('display', 'none')
                            : this.$previousArrow.css('display', 'block'),
                        this.selectedSlideIndex === this.getTotalSlides() - 1
                            ? this.$nextArrow.css('display', 'none')
                            : this.$nextArrow.css('display', 'block'));
                },
                _removeArrows: function () {
                    null !== this.$arrows &&
                        (this.$previousArrow.off('click.' + e),
                        this.$nextArrow.off('click.' + e),
                        this.$arrows.remove(),
                        (this.$arrows = null));
                },
                destroyArrows: function () {
                    this._removeArrows(), this.off('update.' + e), this.off('gotoSlide.' + e);
                },
                arrowsDefaults: { arrows: !1, fadeArrows: !0 },
            };
        i.SliderPro.addModule('Arrows', t);
    })((window, jQuery)),
    (function (s) {
        'use strict';
        var n = 'ThumbnailTouchSwipe.' + s.SliderPro.namespace,
            t = {
                thumbnailTouchStartPoint: { x: 0, y: 0 },
                thumbnailTouchEndPoint: { x: 0, y: 0 },
                thumbnailTouchDistance: { x: 0, y: 0 },
                thumbnailTouchStartPosition: 0,
                isThumbnailTouchMoving: !1,
                isThumbnailTouchSwipe: !1,
                thumbnailTouchSwipeEvents: { startEvent: '', moveEvent: '', endEvent: '' },
                initThumbnailTouchSwipe: function () {
                    this.on('update.' + n, s.proxy(this._thumbnailTouchSwipeOnUpdate, this));
                },
                _thumbnailTouchSwipeOnUpdate: function () {
                    !1 !== this.isThumbnailScroller &&
                        (!0 === this.settings.thumbnailTouchSwipe &&
                            !1 === this.isThumbnailTouchSwipe &&
                            ((this.isThumbnailTouchSwipe = !0),
                            (this.thumbnailTouchSwipeEvents.startEvent = 'touchstart.' + n + ' mousedown.' + n),
                            (this.thumbnailTouchSwipeEvents.moveEvent = 'touchmove.' + n + ' mousemove.' + n),
                            (this.thumbnailTouchSwipeEvents.endEvent =
                                'touchend.' + this.uniqueId + '.' + n + ' mouseup.' + this.uniqueId + '.' + n),
                            this.$thumbnails.on(
                                this.thumbnailTouchSwipeEvents.startEvent,
                                s.proxy(this._onThumbnailTouchStart, this),
                            ),
                            this.$thumbnails.on('dragstart.' + n, function (t) {
                                t.preventDefault();
                            }),
                            this.$thumbnails.addClass('sp-grab')),
                        s.each(this.thumbnails, function (t, i) {
                            i.off('thumbnailClick');
                        }));
                },
                _onThumbnailTouchStart: function (t) {
                    var i;
                    1 <= s(t.target).closest('.sp-selectable').length ||
                        ((i = void 0 !== t.originalEvent.touches ? t.originalEvent.touches[0] : t.originalEvent),
                        void 0 === t.originalEvent.touches && t.preventDefault(),
                        s(t.target)
                            .parents('.sp-thumbnail-container')
                            .find('a')
                            .one('click.' + n, function (t) {
                                t.preventDefault();
                            }),
                        (this.thumbnailTouchStartPoint.x = i.pageX || i.clientX),
                        (this.thumbnailTouchStartPoint.y = i.pageY || i.clientY),
                        (this.thumbnailTouchStartPosition = this.thumbnailsPosition),
                        (this.thumbnailTouchDistance.x = this.thumbnailTouchDistance.y = 0),
                        this.$thumbnails.hasClass('sp-animated') &&
                            ((this.isThumbnailTouchMoving = !0),
                            this._stopThumbnailsMovement(),
                            (this.thumbnailTouchStartPosition = this.thumbnailsPosition)),
                        this.$thumbnails.on(
                            this.thumbnailTouchSwipeEvents.moveEvent,
                            s.proxy(this._onThumbnailTouchMove, this),
                        ),
                        s(document).on(
                            this.thumbnailTouchSwipeEvents.endEvent,
                            s.proxy(this._onThumbnailTouchEnd, this),
                        ),
                        this.$thumbnails.removeClass('sp-grab').addClass('sp-grabbing'),
                        this.$thumbnailsContainer.addClass('sp-swiping'));
                },
                _onThumbnailTouchMove: function (t) {
                    var i = void 0 !== t.originalEvent.touches ? t.originalEvent.touches[0] : t.originalEvent;
                    (this.isThumbnailTouchMoving = !0),
                        (this.thumbnailTouchEndPoint.x = i.pageX || i.clientX),
                        (this.thumbnailTouchEndPoint.y = i.pageY || i.clientY),
                        (this.thumbnailTouchDistance.x =
                            this.thumbnailTouchEndPoint.x - this.thumbnailTouchStartPoint.x),
                        (this.thumbnailTouchDistance.y =
                            this.thumbnailTouchEndPoint.y - this.thumbnailTouchStartPoint.y);
                    var e,
                        s,
                        n =
                            'horizontal' === this.thumbnailsOrientation
                                ? this.thumbnailTouchDistance.x
                                : this.thumbnailTouchDistance.y,
                        o =
                            'horizontal' === this.thumbnailsOrientation
                                ? this.thumbnailTouchDistance.y
                                : this.thumbnailTouchDistance.x;
                    Math.abs(n) > Math.abs(o) &&
                        (t.preventDefault(),
                        0 <= this.thumbnailsPosition
                            ? (n = (e = -this.thumbnailTouchStartPosition) + 0.2 * (n - e))
                            : this.thumbnailsPosition <= -this.thumbnailsSize + this.thumbnailsContainerSize &&
                              (n =
                                  0.2 *
                                      (n +
                                          (s =
                                              this.thumbnailsSize -
                                              this.thumbnailsContainerSize +
                                              this.thumbnailTouchStartPosition)) -
                                  s),
                        this._moveThumbnailsTo(this.thumbnailTouchStartPosition + n, !0));
                },
                _onThumbnailTouchEnd: function (t) {
                    var i,
                        e = this;
                    'horizontal' === this.thumbnailsOrientation
                        ? this.thumbnailTouchDistance.x
                        : this.thumbnailTouchDistance.y,
                        this.$thumbnails.off(this.thumbnailTouchSwipeEvents.moveEvent),
                        s(document).off(this.thumbnailTouchSwipeEvents.endEvent),
                        this.$thumbnails.removeClass('sp-grabbing').addClass('sp-grab'),
                        !1 === this.isThumbnailTouchMoving ||
                        (!0 === this.isThumbnailTouchMoving &&
                            Math.abs(this.thumbnailTouchDistance.x) < 10 &&
                            Math.abs(this.thumbnailTouchDistance.y) < 10)
                            ? ((i = (
                                  s(t.target).hasClass('sp-thumbnail-container')
                                      ? s(t.target)
                                      : s(t.target).parents('.sp-thumbnail-container')
                              ).index()),
                              0 !== s(t.target).parents('a').length
                                  ? (s(t.target)
                                        .parents('a')
                                        .off('click.' + n),
                                    this.$thumbnailsContainer.removeClass('sp-swiping'))
                                  : i !== this.selectedThumbnailIndex && -1 !== i && this.gotoSlide(i))
                            : ((this.isThumbnailTouchMoving = !1),
                              s(t.target)
                                  .parents('.sp-thumbnail')
                                  .one('click', function (t) {
                                      t.preventDefault();
                                  }),
                              setTimeout(function () {
                                  e.$thumbnailsContainer.removeClass('sp-swiping');
                              }, 1),
                              0 < this.thumbnailsPosition
                                  ? this._moveThumbnailsTo(0)
                                  : this.thumbnailsPosition < this.thumbnailsContainerSize - this.thumbnailsSize &&
                                    this._moveThumbnailsTo(this.thumbnailsContainerSize - this.thumbnailsSize),
                              this.trigger({ type: 'thumbnailsMoveComplete' }),
                              s.isFunction(this.settings.thumbnailsMoveComplete) &&
                                  this.settings.thumbnailsMoveComplete.call(this, { type: 'thumbnailsMoveComplete' }));
                },
                destroyThumbnailTouchSwipe: function () {
                    this.off('update.' + n),
                        !1 !== this.isThumbnailScroller &&
                            (this.$thumbnails.off(this.thumbnailTouchSwipeEvents.startEvent),
                            this.$thumbnails.off(this.thumbnailTouchSwipeEvents.moveEvent),
                            this.$thumbnails.off('dragstart.' + n),
                            s(document).off(this.thumbnailTouchSwipeEvents.endEvent),
                            this.$thumbnails.removeClass('sp-grab'));
                },
                thumbnailTouchSwipeDefaults: { thumbnailTouchSwipe: !0 },
            };
        s.SliderPro.addModule('ThumbnailTouchSwipe', t);
    })((window, jQuery)),
    (function (e) {
        'use strict';
        var s = 'ThumbnailArrows.' + e.SliderPro.namespace,
            t = {
                $thumbnailArrows: null,
                $previousThumbnailArrow: null,
                $nextThumbnailArrow: null,
                initThumbnailArrows: function () {
                    var t = this;
                    this.on('update.' + s, e.proxy(this._thumbnailArrowsOnUpdate, this)),
                        this.on('sliderResize.' + s + ' thumbnailsMoveComplete.' + s, function () {
                            !0 === t.isThumbnailScroller &&
                                !0 === t.settings.thumbnailArrows &&
                                t._checkThumbnailArrowsVisibility();
                        });
                },
                _thumbnailArrowsOnUpdate: function () {
                    var i = this;
                    !1 !== this.isThumbnailScroller &&
                        (!0 === this.settings.thumbnailArrows && null === this.$thumbnailArrows
                            ? ((this.$thumbnailArrows = e('<div class="sp-thumbnail-arrows"></div>').appendTo(
                                  this.$thumbnailsContainer,
                              )),
                              (this.$previousThumbnailArrow = e(
                                  '<div class="sp-thumbnail-arrow sp-previous-thumbnail-arrow"></div>',
                              ).appendTo(this.$thumbnailArrows)),
                              (this.$nextThumbnailArrow = e(
                                  '<div class="sp-thumbnail-arrow sp-next-thumbnail-arrow"></div>',
                              ).appendTo(this.$thumbnailArrows)),
                              this.$previousThumbnailArrow.on('click.' + s, function () {
                                  var t = Math.min(0, i.thumbnailsPosition + i.thumbnailsContainerSize);
                                  i._moveThumbnailsTo(t);
                              }),
                              this.$nextThumbnailArrow.on('click.' + s, function () {
                                  var t = Math.max(
                                      i.thumbnailsContainerSize - i.thumbnailsSize,
                                      i.thumbnailsPosition - i.thumbnailsContainerSize,
                                  );
                                  i._moveThumbnailsTo(t);
                              }))
                            : !1 === this.settings.thumbnailArrows &&
                              null !== this.$thumbnailArrows &&
                              this._removeThumbnailArrows(),
                        !0 === this.settings.thumbnailArrows &&
                            (!0 === this.settings.fadeThumbnailArrows
                                ? this.$thumbnailArrows.addClass('sp-fade-thumbnail-arrows')
                                : !1 === this.settings.fadeThumbnailArrows &&
                                  this.$thumbnailArrows.removeClass('sp-fade-thumbnail-arrows'),
                            this._checkThumbnailArrowsVisibility()));
                },
                _checkThumbnailArrowsVisibility: function () {
                    0 === this.thumbnailsPosition
                        ? this.$previousThumbnailArrow.css('display', 'none')
                        : this.$previousThumbnailArrow.css('display', 'block'),
                        this.thumbnailsPosition === this.thumbnailsContainerSize - this.thumbnailsSize
                            ? this.$nextThumbnailArrow.css('display', 'none')
                            : this.$nextThumbnailArrow.css('display', 'block');
                },
                _removeThumbnailArrows: function () {
                    null !== this.$thumbnailArrows &&
                        (this.$previousThumbnailArrow.off('click.' + s),
                        this.$nextThumbnailArrow.off('click.' + s),
                        this.$thumbnailArrows.remove(),
                        (this.$thumbnailArrows = null));
                },
                destroyThumbnailArrows: function () {
                    this._removeThumbnailArrows(),
                        this.off('update.' + s),
                        this.off('sliderResize.' + s),
                        this.off('thumbnailsMoveComplete.' + s);
                },
                thumbnailArrowsDefaults: { thumbnailArrows: !1, fadeThumbnailArrows: !0 },
            };
        e.SliderPro.addModule('ThumbnailArrows', t);
    })((window, jQuery)),
    (function (p) {
        'use strict';
        var n = 'Video.' + p.SliderPro.namespace,
            t = {
                initVideo: function () {
                    this.on('update.' + n, p.proxy(this._videoOnUpdate, this)),
                        this.on('gotoSlideComplete.' + n, p.proxy(this._videoOnGotoSlideComplete, this));
                },
                _videoOnUpdate: function () {
                    var i = this;
                    this.$slider
                        .find('.sp-video')
                        .not('a, [data-video-init]')
                        .each(function () {
                            var t = p(this);
                            i._initVideo(t);
                        }),
                        this.$slider
                            .find('a.sp-video')
                            .not('[data-video-preinit]')
                            .each(function () {
                                var t = p(this);
                                i._preinitVideo(t);
                            });
                },
                _initVideo: function (i) {
                    var e = this;
                    i.attr('data-video-init', !0).videoController(),
                        i.on('videoPlay.' + n, function () {
                            'stopAutoplay' === e.settings.playVideoAction &&
                                void 0 !== e.stopAutoplay &&
                                (e.stopAutoplay(), (e.settings.autoplay = !1));
                            var t = { type: 'videoPlay', video: i };
                            e.trigger(t), p.isFunction(e.settings.videoPlay) && e.settings.videoPlay.call(e, t);
                        }),
                        i.on('videoPause.' + n, function () {
                            'startAutoplay' === e.settings.pauseVideoAction &&
                                void 0 !== e.startAutoplay &&
                                (e.startAutoplay(), (e.settings.autoplay = !0));
                            var t = { type: 'videoPause', video: i };
                            e.trigger(t), p.isFunction(e.settings.videoPause) && e.settings.videoPause.call(e, t);
                        }),
                        i.on('videoEnded.' + n, function () {
                            'startAutoplay' === e.settings.endVideoAction && void 0 !== e.startAutoplay
                                ? (e.startAutoplay(), (e.settings.autoplay = !0))
                                : 'nextSlide' === e.settings.endVideoAction
                                ? e.nextSlide()
                                : 'replayVideo' === e.settings.endVideoAction && i.videoController('replay');
                            var t = { type: 'videoEnd', video: i };
                            e.trigger(t), p.isFunction(e.settings.videoEnd) && e.settings.videoEnd.call(e, t);
                        });
                },
                _preinitVideo: function (u) {
                    var c = this;
                    u.attr('data-video-preinit', !0),
                        u.on('click.' + n, function (t) {
                            var i, e, s, n, o, a, h, r, l, d;
                            c.$slider.hasClass('sp-swiping') ||
                                (t.preventDefault(),
                                (r = u.attr('href')),
                                (l = u.children('img').attr('width')),
                                (d = u.children('img').attr('height')),
                                -1 !== r.indexOf('youtube') || -1 !== r.indexOf('youtu.be')
                                    ? (e = 'youtube')
                                    : -1 !== r.indexOf('vimeo') && (e = 'vimeo'),
                                (s =
                                    'youtube' === e
                                        ? /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/
                                        : /http:\/\/(www\.)?vimeo.com\/(\d+)/),
                                (n = r.match(s)),
                                (o = n[2]),
                                (a =
                                    'youtube' === e
                                        ? 'http://www.youtube.com/embed/' + o + '?enablejsapi=1&wmode=opaque'
                                        : 'http://player.vimeo.com/video/' + o + '?api=1'),
                                void 0 !== (h = r.split('?')[1]) &&
                                    ((h = h.split('&')),
                                    p.each(h, function (t, i) {
                                        -1 === i.indexOf(o) && (a += '&' + i);
                                    })),
                                (i = p('<iframe></iframe>')
                                    .attr({ src: a, width: l, height: d, class: u.attr('class'), frameborder: 0 })
                                    .insertBefore(u)),
                                c._initVideo(i),
                                i.videoController('play'),
                                u.css('display', 'none'));
                        });
                },
                _videoOnGotoSlideComplete: function (t) {
                    var i,
                        e,
                        s = this.$slides.find('.sp-slide').eq(t.previousIndex).find('.sp-video[data-video-init]');
                    -1 !== t.previousIndex &&
                        0 !== s.length &&
                        ('stopVideo' === this.settings.leaveVideoAction
                            ? s.videoController('stop')
                            : 'pauseVideo' === this.settings.leaveVideoAction
                            ? s.videoController('pause')
                            : 'removeVideo' === this.settings.leaveVideoAction &&
                              (0 !== s.siblings('a.sp-video').length
                                  ? (s.siblings('a.sp-video').css('display', ''),
                                    s.videoController('destroy'),
                                    s.remove())
                                  : s.videoController('stop'))),
                        'playVideo' === this.settings.reachVideoAction &&
                            ((i = this.$slides.find('.sp-slide').eq(t.index).find('.sp-video[data-video-init]')),
                            (e = this.$slides.find('.sp-slide').eq(t.index).find('.sp-video[data-video-preinit]')),
                            0 !== i.length ? i.videoController('play') : 0 !== e.length && e.trigger('click.' + n));
                },
                destroyVideo: function () {
                    this.$slider.find('.sp-video[ data-video-preinit ]').each(function () {
                        var t = p(this);
                        t.removeAttr('data-video-preinit'), t.off('click.' + n);
                    }),
                        this.$slider.find('.sp-video[ data-video-init ]').each(function () {
                            var t = p(this);
                            t.removeAttr('data-video-init'), t.off('Video'), t.videoController('destroy');
                        }),
                        this.off('update.' + n),
                        this.off('gotoSlideComplete.' + n);
                },
                videoDefaults: {
                    reachVideoAction: 'none',
                    leaveVideoAction: 'pauseVideo',
                    playVideoAction: 'stopAutoplay',
                    pauseVideoAction: 'none',
                    endVideoAction: 'none',
                    videoPlay: function () {},
                    videoPause: function () {},
                    videoEnd: function () {},
                },
            };
        p.SliderPro.addModule('Video', t);
    })((window, jQuery)),
    (function (o) {
        'use strict';
        function n(t, i) {
            (this.$video = o(t)), (this.options = i), (this.settings = {}), (this.player = null), this._init();
        }
        var t = !!window.navigator.userAgent.match(/(iPad|iPhone|iPod)/g);
        (n.prototype = {
            _init: function () {
                this.settings = o.extend({}, this.defaults, this.options);
                var s = this,
                    t = o.VideoController.players,
                    n = this.$video.attr('id');
                for (var i in t)
                    if (void 0 !== t[i] && t[i].isType(this.$video)) {
                        this.player = new t[i](this.$video);
                        break;
                    }
                null !== this.player &&
                    o.each(['ready', 'start', 'play', 'pause', 'ended'], function (t, i) {
                        var e = 'video' + i.charAt(0).toUpperCase() + i.slice(1);
                        s.player.on(i, function () {
                            s.trigger({ type: e, video: n }),
                                o.isFunction(s.settings[e]) && s.settings[e].call(s, { type: e, video: n });
                        });
                    });
            },
            play: function () {
                (!0 == t && !1 === this.player.isStarted()) ||
                    'playing' === this.player.getState() ||
                    this.player.play();
            },
            stop: function () {
                (!0 == t && !1 === this.player.isStarted()) ||
                    'stopped' === this.player.getState() ||
                    this.player.stop();
            },
            pause: function () {
                (!0 == t && !1 === this.player.isStarted()) ||
                    'paused' === this.player.getState() ||
                    this.player.pause();
            },
            replay: function () {
                (!0 == t && !1 === this.player.isStarted()) || this.player.replay();
            },
            on: function (t, i) {
                return this.$video.on(t, i);
            },
            off: function (t) {
                return this.$video.off(t);
            },
            trigger: function (t) {
                return this.$video.triggerHandler(t);
            },
            destroy: function () {
                !0 === this.player.isStarted() && this.stop(),
                    this.player.off('ready'),
                    this.player.off('start'),
                    this.player.off('play'),
                    this.player.off('pause'),
                    this.player.off('ended'),
                    this.$video.removeData('videoController');
            },
            defaults: {
                videoReady: function () {},
                videoStart: function () {},
                videoPlay: function () {},
                videoPause: function () {},
                videoEnded: function () {},
            },
        }),
            (o.VideoController = {
                players: {},
                addPlayer: function (t, i) {
                    this.players[t] = i;
                },
            }),
            (o.fn.videoController = function (e) {
                var s = Array.prototype.slice.call(arguments, 1);
                return this.each(function () {
                    var t, i;
                    void 0 === o(this).data('videoController')
                        ? ((t = new n(this, e)), o(this).data('videoController', t))
                        : void 0 !== e &&
                          ('function' == typeof (i = o(this).data('videoController'))[e]
                              ? i[e].apply(i, s)
                              : o.error(e + ' does not exist in videoController.'));
                });
            });
        function a(t) {
            (this.$video = t),
                (this.player = null),
                (this.ready = !1),
                (this.started = !1),
                (this.state = ''),
                (this.events = o({})),
                this._init();
        }
        function i(t) {
            var i, e;
            (this.init = !1),
                void 0 !== (window.YT && window.YT.Player)
                    ? a.call(this, t)
                    : (s.youtubeVideos.push({ video: t, scope: this }),
                      !1 === s.youtubeAPIAdded &&
                          ((s.youtubeAPIAdded = !0),
                          ((i = document.createElement('script')).src = 'http://www.youtube.com/player_api'),
                          (e = document.getElementsByTagName('script')[0]).parentNode.insertBefore(i, e),
                          (window.onYouTubePlayerAPIReady = function () {
                              o.each(s.youtubeVideos, function (t, i) {
                                  a.call(i.scope, i.video);
                              });
                          })));
        }
        var s = {
            youtubeAPIAdded: !(a.prototype = {
                _init: function () {},
                play: function () {},
                pause: function () {},
                stop: function () {},
                replay: function () {},
                isType: function () {},
                isReady: function () {
                    return this.ready;
                },
                isStarted: function () {
                    return this.started;
                },
                getState: function () {
                    return this.state;
                },
                on: function (t, i) {
                    return this.events.on(t, i);
                },
                off: function (t) {
                    return this.events.off(t);
                },
                trigger: function (t) {
                    return this.events.triggerHandler(t);
                },
            }),
            youtubeVideos: [],
        };
        ((i.prototype = new a()).constructor = i),
            o.VideoController.addPlayer('YoutubeVideo', i),
            (i.isType = function (t) {
                if (t.is('iframe')) {
                    var i = t.attr('src');
                    if (-1 !== i.indexOf('youtube.com') || -1 !== i.indexOf('youtu.be')) return !0;
                }
                return !1;
            }),
            (i.prototype._init = function () {
                (this.init = !0), this._setup();
            }),
            (i.prototype._setup = function () {
                var i = this;
                this.player = new YT.Player(this.$video[0], {
                    events: {
                        onReady: function () {
                            i.trigger({ type: 'ready' }), (i.ready = !0);
                        },
                        onStateChange: function (t) {
                            switch (t.data) {
                                case YT.PlayerState.PLAYING:
                                    !1 === i.started && ((i.started = !0), i.trigger({ type: 'start' })),
                                        (i.state = 'playing'),
                                        i.trigger({ type: 'play' });
                                    break;
                                case YT.PlayerState.PAUSED:
                                    (i.state = 'paused'), i.trigger({ type: 'pause' });
                                    break;
                                case YT.PlayerState.ENDED:
                                    (i.state = 'ended'), i.trigger({ type: 'ended' });
                            }
                        },
                    },
                });
            }),
            (i.prototype.play = function () {
                var t,
                    i = this;
                !0 === this.ready
                    ? this.player.playVideo()
                    : (t = setInterval(function () {
                          !0 === i.ready && (clearInterval(t), i.player.playVideo());
                      }, 100));
            }),
            (i.prototype.pause = function () {
                !0 == t ? this.stop() : this.player.pauseVideo();
            }),
            (i.prototype.stop = function () {
                this.player.seekTo(1), this.player.stopVideo(), (this.state = 'stopped');
            }),
            (i.prototype.replay = function () {
                this.player.seekTo(1), this.player.playVideo();
            });
        function e(t) {
            var i, e, s;
            (this.init = !1),
                void 0 !== window.Froogaloop
                    ? a.call(this, t)
                    : (h.vimeoVideos.push({ video: t, scope: this }),
                      !1 === h.vimeoAPIAdded &&
                          ((h.vimeoAPIAdded = !0),
                          ((i = document.createElement('script')).src = 'http://a.vimeocdn.com/js/froogaloop2.min.js'),
                          (e = document.getElementsByTagName('script')[0]).parentNode.insertBefore(i, e),
                          (s = setInterval(function () {
                              void 0 !== window.Froogaloop &&
                                  (clearInterval(s),
                                  o.each(h.vimeoVideos, function (t, i) {
                                      a.call(i.scope, i.video);
                                  }));
                          }, 100))));
        }
        var h = {
            vimeoAPIAdded: !(i.prototype.on = function (t, i) {
                var e,
                    s = this;
                !0 === this.init
                    ? a.prototype.on.call(this, t, i)
                    : (e = setInterval(function () {
                          !0 === s.init && (clearInterval(e), a.prototype.on.call(s, t, i));
                      }, 100));
            }),
            vimeoVideos: [],
        };
        ((e.prototype = new a()).constructor = e),
            o.VideoController.addPlayer('VimeoVideo', e),
            (e.isType = function (t) {
                if (t.is('iframe') && -1 !== t.attr('src').indexOf('vimeo.com')) return !0;
                return !1;
            }),
            (e.prototype._init = function () {
                (this.init = !0), this._setup();
            }),
            (e.prototype._setup = function () {
                var t = this;
                (this.player = $f(this.$video[0])),
                    this.player.addEvent('ready', function () {
                        (t.ready = !0),
                            t.trigger({ type: 'ready' }),
                            t.player.addEvent('play', function () {
                                !1 === t.started && ((t.started = !0), t.trigger({ type: 'start' })),
                                    (t.state = 'playing'),
                                    t.trigger({ type: 'play' });
                            }),
                            t.player.addEvent('pause', function () {
                                (t.state = 'paused'), t.trigger({ type: 'pause' });
                            }),
                            t.player.addEvent('finish', function () {
                                (t.state = 'ended'), t.trigger({ type: 'ended' });
                            });
                    });
            }),
            (e.prototype.play = function () {
                var t,
                    i = this;
                !0 === this.ready
                    ? this.player.api('play')
                    : (t = setInterval(function () {
                          !0 === i.ready && (clearInterval(t), i.player.api('play'));
                      }, 100));
            }),
            (e.prototype.pause = function () {
                this.player.api('pause');
            }),
            (e.prototype.stop = function () {
                this.player.api('seekTo', 0), this.player.api('pause'), (this.state = 'stopped');
            }),
            (e.prototype.replay = function () {
                this.player.api('seekTo', 0), this.player.api('play');
            }),
            (e.prototype.on = function (t, i) {
                var e,
                    s = this;
                !0 === this.init
                    ? a.prototype.on.call(this, t, i)
                    : (e = setInterval(function () {
                          !0 === s.init && (clearInterval(e), a.prototype.on.call(s, t, i));
                      }, 100));
            });
        function r(t) {
            a.call(this, t);
        }
        ((r.prototype = new a()).constructor = r),
            o.VideoController.addPlayer('HTML5Video', r),
            (r.isType = function (t) {
                return !(!t.is('video') || !1 !== t.hasClass('video-js') || !1 !== t.hasClass('sublime'));
            }),
            (r.prototype._init = function () {
                var t = this;
                (this.player = this.$video[0]),
                    (this.ready = !0),
                    this.player.addEventListener('play', function () {
                        !1 === t.started && ((t.started = !0), t.trigger({ type: 'start' })),
                            (t.state = 'playing'),
                            t.trigger({ type: 'play' });
                    }),
                    this.player.addEventListener('pause', function () {
                        (t.state = 'paused'), t.trigger({ type: 'pause' });
                    }),
                    this.player.addEventListener('ended', function () {
                        (t.state = 'ended'), t.trigger({ type: 'ended' });
                    });
            }),
            (r.prototype.play = function () {
                this.player.play();
            }),
            (r.prototype.pause = function () {
                this.player.pause();
            }),
            (r.prototype.stop = function () {
                (this.player.currentTime = 0), this.player.pause(), (this.state = 'stopped');
            }),
            (r.prototype.replay = function () {
                (this.player.currentTime = 0), this.player.play();
            });
        function l(t) {
            a.call(this, t);
        }
        ((l.prototype = new a()).constructor = l),
            o.VideoController.addPlayer('VideoJSVideo', l),
            (l.isType = function (t) {
                return !(
                    (void 0 === t.attr('data-videojs-id') && !t.hasClass('video-js')) ||
                    'undefined' == typeof videojs
                );
            }),
            (l.prototype._init = function () {
                var t = this,
                    i = this.$video.attr(this.$video.hasClass('video-js') ? 'id' : 'data-videojs-id');
                (this.player = videojs(i)),
                    this.player.ready(function () {
                        (t.ready = !0),
                            t.trigger({ type: 'ready' }),
                            t.player.on('play', function () {
                                !1 === t.started && ((t.started = !0), t.trigger({ type: 'start' })),
                                    (t.state = 'playing'),
                                    t.trigger({ type: 'play' });
                            }),
                            t.player.on('pause', function () {
                                (t.state = 'paused'), t.trigger({ type: 'pause' });
                            }),
                            t.player.on('ended', function () {
                                (t.state = 'ended'), t.trigger({ type: 'ended' });
                            });
                    });
            }),
            (l.prototype.play = function () {
                this.player.play();
            }),
            (l.prototype.pause = function () {
                this.player.pause();
            }),
            (l.prototype.stop = function () {
                this.player.currentTime(0), this.player.pause(), (this.state = 'stopped');
            }),
            (l.prototype.replay = function () {
                this.player.currentTime(0), this.player.play();
            });
        function d(t) {
            a.call(this, t);
        }
        ((d.prototype = new a()).constructor = d),
            o.VideoController.addPlayer('SublimeVideo', d),
            (d.isType = function (t) {
                return !(!t.hasClass('sublime') || 'undefined' == typeof sublime);
            }),
            (d.prototype._init = function () {
                var t = this;
                sublime.ready(function () {
                    (t.player = sublime.player(t.$video.attr('id'))),
                        (t.ready = !0),
                        t.trigger({ type: 'ready' }),
                        t.player.on('play', function () {
                            !1 === t.started && ((t.started = !0), t.trigger({ type: 'start' })),
                                (t.state = 'playing'),
                                t.trigger({ type: 'play' });
                        }),
                        t.player.on('pause', function () {
                            (t.state = 'paused'), t.trigger({ type: 'pause' });
                        }),
                        t.player.on('stop', function () {
                            (t.state = 'stopped'), t.trigger({ type: 'stop' });
                        }),
                        t.player.on('end', function () {
                            (t.state = 'ended'), t.trigger({ type: 'ended' });
                        });
                });
            }),
            (d.prototype.play = function () {
                this.player.play();
            }),
            (d.prototype.pause = function () {
                this.player.pause();
            }),
            (d.prototype.stop = function () {
                this.player.stop();
            }),
            (d.prototype.replay = function () {
                this.player.stop(), this.player.play();
            });
        function u(t) {
            a.call(this, t);
        }
        ((u.prototype = new a()).constructor = u),
            o.VideoController.addPlayer('JWPlayerVideo', u),
            (u.isType = function (t) {
                return !(
                    (void 0 === t.attr('data-jwplayer-id') &&
                        !t.hasClass('jwplayer') &&
                        0 === t.find("object[data*='jwplayer']").length) ||
                    'undefined' == typeof jwplayer
                );
            }),
            (u.prototype._init = function () {
                var t,
                    i = this;
                this.$video.hasClass('jwplayer')
                    ? (t = this.$video.attr('id'))
                    : void 0 !== this.$video.attr('data-jwplayer-id')
                    ? (t = this.$video.attr('data-jwplayer-id'))
                    : 0 !== this.$video.find("object[data*='jwplayer']").length &&
                      (t = this.$video.find('object').attr('id')),
                    (this.player = jwplayer(t)),
                    this.player.onReady(function () {
                        (i.ready = !0),
                            i.trigger({ type: 'ready' }),
                            i.player.onPlay(function () {
                                !1 === i.started && ((i.started = !0), i.trigger({ type: 'start' })),
                                    (i.state = 'playing'),
                                    i.trigger({ type: 'play' });
                            }),
                            i.player.onPause(function () {
                                (i.state = 'paused'), i.trigger({ type: 'pause' });
                            }),
                            i.player.onComplete(function () {
                                (i.state = 'ended'), i.trigger({ type: 'ended' });
                            });
                    });
            }),
            (u.prototype.play = function () {
                this.player.play(!0);
            }),
            (u.prototype.pause = function () {
                this.player.pause(!0);
            }),
            (u.prototype.stop = function () {
                this.player.stop(), (this.state = 'stopped');
            }),
            (u.prototype.replay = function () {
                this.player.seek(0), this.player.play(!0);
            });
    })(jQuery);
